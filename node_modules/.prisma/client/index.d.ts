
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Character
 * 
 */
export type Character = $Result.DefaultSelection<Prisma.$CharacterPayload>
/**
 * Model Stand
 * 
 */
export type Stand = $Result.DefaultSelection<Prisma.$StandPayload>
/**
 * Model StandAbility
 * 
 */
export type StandAbility = $Result.DefaultSelection<Prisma.$StandAbilityPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model Clock
 * 
 */
export type Clock = $Result.DefaultSelection<Prisma.$ClockPayload>
/**
 * Model Roll
 * 
 */
export type Roll = $Result.DefaultSelection<Prisma.$RollPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<ExtArgs>;

  /**
   * `prisma.stand`: Exposes CRUD operations for the **Stand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stands
    * const stands = await prisma.stand.findMany()
    * ```
    */
  get stand(): Prisma.StandDelegate<ExtArgs>;

  /**
   * `prisma.standAbility`: Exposes CRUD operations for the **StandAbility** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StandAbilities
    * const standAbilities = await prisma.standAbility.findMany()
    * ```
    */
  get standAbility(): Prisma.StandAbilityDelegate<ExtArgs>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs>;

  /**
   * `prisma.clock`: Exposes CRUD operations for the **Clock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clocks
    * const clocks = await prisma.clock.findMany()
    * ```
    */
  get clock(): Prisma.ClockDelegate<ExtArgs>;

  /**
   * `prisma.roll`: Exposes CRUD operations for the **Roll** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rolls
    * const rolls = await prisma.roll.findMany()
    * ```
    */
  get roll(): Prisma.RollDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Character: 'Character',
    Stand: 'Stand',
    StandAbility: 'StandAbility',
    Campaign: 'Campaign',
    Clock: 'Clock',
    Roll: 'Roll'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "character" | "stand" | "standAbility" | "campaign" | "clock" | "roll"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Character: {
        payload: Prisma.$CharacterPayload<ExtArgs>
        fields: Prisma.CharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findFirst: {
            args: Prisma.CharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findMany: {
            args: Prisma.CharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          create: {
            args: Prisma.CharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          createMany: {
            args: Prisma.CharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CharacterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          delete: {
            args: Prisma.CharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          update: {
            args: Prisma.CharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          deleteMany: {
            args: Prisma.CharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          aggregate: {
            args: Prisma.CharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacter>
          }
          groupBy: {
            args: Prisma.CharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterCountAggregateOutputType> | number
          }
        }
      }
      Stand: {
        payload: Prisma.$StandPayload<ExtArgs>
        fields: Prisma.StandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          findFirst: {
            args: Prisma.StandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          findMany: {
            args: Prisma.StandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>[]
          }
          create: {
            args: Prisma.StandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          createMany: {
            args: Prisma.StandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StandCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>[]
          }
          delete: {
            args: Prisma.StandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          update: {
            args: Prisma.StandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          deleteMany: {
            args: Prisma.StandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandPayload>
          }
          aggregate: {
            args: Prisma.StandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStand>
          }
          groupBy: {
            args: Prisma.StandGroupByArgs<ExtArgs>
            result: $Utils.Optional<StandGroupByOutputType>[]
          }
          count: {
            args: Prisma.StandCountArgs<ExtArgs>
            result: $Utils.Optional<StandCountAggregateOutputType> | number
          }
        }
      }
      StandAbility: {
        payload: Prisma.$StandAbilityPayload<ExtArgs>
        fields: Prisma.StandAbilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StandAbilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StandAbilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          findFirst: {
            args: Prisma.StandAbilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StandAbilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          findMany: {
            args: Prisma.StandAbilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>[]
          }
          create: {
            args: Prisma.StandAbilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          createMany: {
            args: Prisma.StandAbilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StandAbilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>[]
          }
          delete: {
            args: Prisma.StandAbilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          update: {
            args: Prisma.StandAbilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          deleteMany: {
            args: Prisma.StandAbilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StandAbilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StandAbilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StandAbilityPayload>
          }
          aggregate: {
            args: Prisma.StandAbilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStandAbility>
          }
          groupBy: {
            args: Prisma.StandAbilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<StandAbilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.StandAbilityCountArgs<ExtArgs>
            result: $Utils.Optional<StandAbilityCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      Clock: {
        payload: Prisma.$ClockPayload<ExtArgs>
        fields: Prisma.ClockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          findFirst: {
            args: Prisma.ClockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          findMany: {
            args: Prisma.ClockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>[]
          }
          create: {
            args: Prisma.ClockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          createMany: {
            args: Prisma.ClockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>[]
          }
          delete: {
            args: Prisma.ClockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          update: {
            args: Prisma.ClockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          deleteMany: {
            args: Prisma.ClockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClockPayload>
          }
          aggregate: {
            args: Prisma.ClockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClock>
          }
          groupBy: {
            args: Prisma.ClockGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClockGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClockCountArgs<ExtArgs>
            result: $Utils.Optional<ClockCountAggregateOutputType> | number
          }
        }
      }
      Roll: {
        payload: Prisma.$RollPayload<ExtArgs>
        fields: Prisma.RollFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RollFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RollFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          findFirst: {
            args: Prisma.RollFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RollFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          findMany: {
            args: Prisma.RollFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>[]
          }
          create: {
            args: Prisma.RollCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          createMany: {
            args: Prisma.RollCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RollCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>[]
          }
          delete: {
            args: Prisma.RollDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          update: {
            args: Prisma.RollUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          deleteMany: {
            args: Prisma.RollDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RollUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RollUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollPayload>
          }
          aggregate: {
            args: Prisma.RollAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoll>
          }
          groupBy: {
            args: Prisma.RollGroupByArgs<ExtArgs>
            result: $Utils.Optional<RollGroupByOutputType>[]
          }
          count: {
            args: Prisma.RollCountArgs<ExtArgs>
            result: $Utils.Optional<RollCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    characters: number
    campaigns: number
    dmCampaigns: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | UserCountOutputTypeCountCharactersArgs
    campaigns?: boolean | UserCountOutputTypeCountCampaignsArgs
    dmCampaigns?: boolean | UserCountOutputTypeCountDmCampaignsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDmCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }


  /**
   * Count Type CharacterCountOutputType
   */

  export type CharacterCountOutputType = {
    rolls: number
  }

  export type CharacterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolls?: boolean | CharacterCountOutputTypeCountRollsArgs
  }

  // Custom InputTypes
  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCountOutputType
     */
    select?: CharacterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountRollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollWhereInput
  }


  /**
   * Count Type StandCountOutputType
   */

  export type StandCountOutputType = {
    abilities: number
  }

  export type StandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    abilities?: boolean | StandCountOutputTypeCountAbilitiesArgs
  }

  // Custom InputTypes
  /**
   * StandCountOutputType without action
   */
  export type StandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandCountOutputType
     */
    select?: StandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StandCountOutputType without action
   */
  export type StandCountOutputTypeCountAbilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StandAbilityWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    players: number
    characters: number
    clocks: number
    rolls: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | CampaignCountOutputTypeCountPlayersArgs
    characters?: boolean | CampaignCountOutputTypeCountCharactersArgs
    clocks?: boolean | CampaignCountOutputTypeCountClocksArgs
    rolls?: boolean | CampaignCountOutputTypeCountRollsArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountClocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClockWhereInput
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountRollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    googleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    passwordHash: string | null
    googleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    passwordHash: number
    googleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    googleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    googleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    passwordHash?: true
    googleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string | null
    passwordHash: string | null
    googleId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    googleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    characters?: boolean | User$charactersArgs<ExtArgs>
    campaigns?: boolean | User$campaignsArgs<ExtArgs>
    dmCampaigns?: boolean | User$dmCampaignsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    googleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    passwordHash?: boolean
    googleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    characters?: boolean | User$charactersArgs<ExtArgs>
    campaigns?: boolean | User$campaignsArgs<ExtArgs>
    dmCampaigns?: boolean | User$dmCampaignsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      campaigns: Prisma.$CampaignPayload<ExtArgs>[]
      dmCampaigns: Prisma.$CampaignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string | null
      passwordHash: string | null
      googleId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    characters<T extends User$charactersArgs<ExtArgs> = {}>(args?: Subset<T, User$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany"> | Null>
    campaigns<T extends User$campaignsArgs<ExtArgs> = {}>(args?: Subset<T, User$campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany"> | Null>
    dmCampaigns<T extends User$dmCampaignsArgs<ExtArgs> = {}>(args?: Subset<T, User$dmCampaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.characters
   */
  export type User$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * User.campaigns
   */
  export type User$campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * User.dmCampaigns
   */
  export type User$dmCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Character
   */

  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    tier: number | null
    hunt: number | null
    study: number | null
    survey: number | null
    tinker: number | null
    finesse: number | null
    prowl: number | null
    skirmish: number | null
    wreck: number | null
    bizarre: number | null
    command: number | null
    consort: number | null
    sway: number | null
    stress: number | null
    maxStress: number | null
    trauma: number | null
    insightXp: number | null
    prowessXp: number | null
    resolveXp: number | null
    playbackXp: number | null
    specialArmor: number | null
  }

  export type CharacterSumAggregateOutputType = {
    tier: number | null
    hunt: number | null
    study: number | null
    survey: number | null
    tinker: number | null
    finesse: number | null
    prowl: number | null
    skirmish: number | null
    wreck: number | null
    bizarre: number | null
    command: number | null
    consort: number | null
    sway: number | null
    stress: number | null
    maxStress: number | null
    trauma: number | null
    insightXp: number | null
    prowessXp: number | null
    resolveXp: number | null
    playbackXp: number | null
    specialArmor: number | null
  }

  export type CharacterMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    campaignId: string | null
    origin: string | null
    tier: number | null
    hunt: number | null
    study: number | null
    survey: number | null
    tinker: number | null
    finesse: number | null
    prowl: number | null
    skirmish: number | null
    wreck: number | null
    bizarre: number | null
    command: number | null
    consort: number | null
    sway: number | null
    stress: number | null
    maxStress: number | null
    trauma: number | null
    vice: string | null
    vicePurveyor: string | null
    insightXp: number | null
    prowessXp: number | null
    resolveXp: number | null
    playbackXp: number | null
    specialArmor: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    campaignId: string | null
    origin: string | null
    tier: number | null
    hunt: number | null
    study: number | null
    survey: number | null
    tinker: number | null
    finesse: number | null
    prowl: number | null
    skirmish: number | null
    wreck: number | null
    bizarre: number | null
    command: number | null
    consort: number | null
    sway: number | null
    stress: number | null
    maxStress: number | null
    trauma: number | null
    vice: string | null
    vicePurveyor: string | null
    insightXp: number | null
    prowessXp: number | null
    resolveXp: number | null
    playbackXp: number | null
    specialArmor: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    campaignId: number
    origin: number
    tier: number
    hunt: number
    study: number
    survey: number
    tinker: number
    finesse: number
    prowl: number
    skirmish: number
    wreck: number
    bizarre: number
    command: number
    consort: number
    sway: number
    stress: number
    maxStress: number
    trauma: number
    traumaConditions: number
    vice: number
    vicePurveyor: number
    friends: number
    rivals: number
    insightXp: number
    prowessXp: number
    resolveXp: number
    playbackXp: number
    harm: number
    specialArmor: number
    items: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    tier?: true
    hunt?: true
    study?: true
    survey?: true
    tinker?: true
    finesse?: true
    prowl?: true
    skirmish?: true
    wreck?: true
    bizarre?: true
    command?: true
    consort?: true
    sway?: true
    stress?: true
    maxStress?: true
    trauma?: true
    insightXp?: true
    prowessXp?: true
    resolveXp?: true
    playbackXp?: true
    specialArmor?: true
  }

  export type CharacterSumAggregateInputType = {
    tier?: true
    hunt?: true
    study?: true
    survey?: true
    tinker?: true
    finesse?: true
    prowl?: true
    skirmish?: true
    wreck?: true
    bizarre?: true
    command?: true
    consort?: true
    sway?: true
    stress?: true
    maxStress?: true
    trauma?: true
    insightXp?: true
    prowessXp?: true
    resolveXp?: true
    playbackXp?: true
    specialArmor?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    campaignId?: true
    origin?: true
    tier?: true
    hunt?: true
    study?: true
    survey?: true
    tinker?: true
    finesse?: true
    prowl?: true
    skirmish?: true
    wreck?: true
    bizarre?: true
    command?: true
    consort?: true
    sway?: true
    stress?: true
    maxStress?: true
    trauma?: true
    vice?: true
    vicePurveyor?: true
    insightXp?: true
    prowessXp?: true
    resolveXp?: true
    playbackXp?: true
    specialArmor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    campaignId?: true
    origin?: true
    tier?: true
    hunt?: true
    study?: true
    survey?: true
    tinker?: true
    finesse?: true
    prowl?: true
    skirmish?: true
    wreck?: true
    bizarre?: true
    command?: true
    consort?: true
    sway?: true
    stress?: true
    maxStress?: true
    trauma?: true
    vice?: true
    vicePurveyor?: true
    insightXp?: true
    prowessXp?: true
    resolveXp?: true
    playbackXp?: true
    specialArmor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    campaignId?: true
    origin?: true
    tier?: true
    hunt?: true
    study?: true
    survey?: true
    tinker?: true
    finesse?: true
    prowl?: true
    skirmish?: true
    wreck?: true
    bizarre?: true
    command?: true
    consort?: true
    sway?: true
    stress?: true
    maxStress?: true
    trauma?: true
    traumaConditions?: true
    vice?: true
    vicePurveyor?: true
    friends?: true
    rivals?: true
    insightXp?: true
    prowessXp?: true
    resolveXp?: true
    playbackXp?: true
    harm?: true
    specialArmor?: true
    items?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character to aggregate.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithAggregationInput | CharacterOrderByWithAggregationInput[]
    by: CharacterScalarFieldEnum[] | CharacterScalarFieldEnum
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }

  export type CharacterGroupByOutputType = {
    id: string
    name: string
    userId: string
    campaignId: string | null
    origin: string
    tier: number
    hunt: number
    study: number
    survey: number
    tinker: number
    finesse: number
    prowl: number
    skirmish: number
    wreck: number
    bizarre: number
    command: number
    consort: number
    sway: number
    stress: number
    maxStress: number
    trauma: number
    traumaConditions: string[]
    vice: string
    vicePurveyor: string
    friends: string[]
    rivals: string[]
    insightXp: number
    prowessXp: number
    resolveXp: number
    playbackXp: number
    harm: JsonValue
    specialArmor: number
    items: string[]
    createdAt: Date
    updatedAt: Date
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    campaignId?: boolean
    origin?: boolean
    tier?: boolean
    hunt?: boolean
    study?: boolean
    survey?: boolean
    tinker?: boolean
    finesse?: boolean
    prowl?: boolean
    skirmish?: boolean
    wreck?: boolean
    bizarre?: boolean
    command?: boolean
    consort?: boolean
    sway?: boolean
    stress?: boolean
    maxStress?: boolean
    trauma?: boolean
    traumaConditions?: boolean
    vice?: boolean
    vicePurveyor?: boolean
    friends?: boolean
    rivals?: boolean
    insightXp?: boolean
    prowessXp?: boolean
    resolveXp?: boolean
    playbackXp?: boolean
    harm?: boolean
    specialArmor?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | Character$campaignArgs<ExtArgs>
    stand?: boolean | Character$standArgs<ExtArgs>
    rolls?: boolean | Character$rollsArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    campaignId?: boolean
    origin?: boolean
    tier?: boolean
    hunt?: boolean
    study?: boolean
    survey?: boolean
    tinker?: boolean
    finesse?: boolean
    prowl?: boolean
    skirmish?: boolean
    wreck?: boolean
    bizarre?: boolean
    command?: boolean
    consort?: boolean
    sway?: boolean
    stress?: boolean
    maxStress?: boolean
    trauma?: boolean
    traumaConditions?: boolean
    vice?: boolean
    vicePurveyor?: boolean
    friends?: boolean
    rivals?: boolean
    insightXp?: boolean
    prowessXp?: boolean
    resolveXp?: boolean
    playbackXp?: boolean
    harm?: boolean
    specialArmor?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | Character$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    campaignId?: boolean
    origin?: boolean
    tier?: boolean
    hunt?: boolean
    study?: boolean
    survey?: boolean
    tinker?: boolean
    finesse?: boolean
    prowl?: boolean
    skirmish?: boolean
    wreck?: boolean
    bizarre?: boolean
    command?: boolean
    consort?: boolean
    sway?: boolean
    stress?: boolean
    maxStress?: boolean
    trauma?: boolean
    traumaConditions?: boolean
    vice?: boolean
    vicePurveyor?: boolean
    friends?: boolean
    rivals?: boolean
    insightXp?: boolean
    prowessXp?: boolean
    resolveXp?: boolean
    playbackXp?: boolean
    harm?: boolean
    specialArmor?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | Character$campaignArgs<ExtArgs>
    stand?: boolean | Character$standArgs<ExtArgs>
    rolls?: boolean | Character$rollsArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CharacterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    campaign?: boolean | Character$campaignArgs<ExtArgs>
  }

  export type $CharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
      stand: Prisma.$StandPayload<ExtArgs> | null
      rolls: Prisma.$RollPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      campaignId: string | null
      origin: string
      tier: number
      hunt: number
      study: number
      survey: number
      tinker: number
      finesse: number
      prowl: number
      skirmish: number
      wreck: number
      bizarre: number
      command: number
      consort: number
      sway: number
      stress: number
      maxStress: number
      trauma: number
      traumaConditions: string[]
      vice: string
      vicePurveyor: string
      friends: string[]
      rivals: string[]
      insightXp: number
      prowessXp: number
      resolveXp: number
      playbackXp: number
      harm: Prisma.JsonValue
      specialArmor: number
      items: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["character"]>
    composites: {}
  }

  type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = $Result.GetResult<Prisma.$CharacterPayload, S>

  type CharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacterCountAggregateInputType | true
    }

  export interface CharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterFindUniqueArgs>(args: SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Character that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterFindFirstArgs>(args?: SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Character that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterFindManyArgs>(args?: SelectSubset<T, CharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
     */
    create<T extends CharacterCreateArgs>(args: SelectSubset<T, CharacterCreateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Characters.
     * @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterCreateManyArgs>(args?: SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Characters and returns the data saved in the database.
     * @param {CharacterCreateManyAndReturnArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Characters and only return the `id`
     * const characterWithIdOnly = await prisma.character.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CharacterCreateManyAndReturnArgs>(args?: SelectSubset<T, CharacterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
     */
    delete<T extends CharacterDeleteArgs>(args: SelectSubset<T, CharacterDeleteArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterUpdateArgs>(args: SelectSubset<T, CharacterUpdateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterDeleteManyArgs>(args?: SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterUpdateManyArgs>(args: SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
     */
    upsert<T extends CharacterUpsertArgs>(args: SelectSubset<T, CharacterUpsertArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character model
   */
  readonly fields: CharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    campaign<T extends Character$campaignArgs<ExtArgs> = {}>(args?: Subset<T, Character$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    stand<T extends Character$standArgs<ExtArgs> = {}>(args?: Subset<T, Character$standArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    rolls<T extends Character$rollsArgs<ExtArgs> = {}>(args?: Subset<T, Character$rollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Character model
   */ 
  interface CharacterFieldRefs {
    readonly id: FieldRef<"Character", 'String'>
    readonly name: FieldRef<"Character", 'String'>
    readonly userId: FieldRef<"Character", 'String'>
    readonly campaignId: FieldRef<"Character", 'String'>
    readonly origin: FieldRef<"Character", 'String'>
    readonly tier: FieldRef<"Character", 'Int'>
    readonly hunt: FieldRef<"Character", 'Int'>
    readonly study: FieldRef<"Character", 'Int'>
    readonly survey: FieldRef<"Character", 'Int'>
    readonly tinker: FieldRef<"Character", 'Int'>
    readonly finesse: FieldRef<"Character", 'Int'>
    readonly prowl: FieldRef<"Character", 'Int'>
    readonly skirmish: FieldRef<"Character", 'Int'>
    readonly wreck: FieldRef<"Character", 'Int'>
    readonly bizarre: FieldRef<"Character", 'Int'>
    readonly command: FieldRef<"Character", 'Int'>
    readonly consort: FieldRef<"Character", 'Int'>
    readonly sway: FieldRef<"Character", 'Int'>
    readonly stress: FieldRef<"Character", 'Int'>
    readonly maxStress: FieldRef<"Character", 'Int'>
    readonly trauma: FieldRef<"Character", 'Int'>
    readonly traumaConditions: FieldRef<"Character", 'String[]'>
    readonly vice: FieldRef<"Character", 'String'>
    readonly vicePurveyor: FieldRef<"Character", 'String'>
    readonly friends: FieldRef<"Character", 'String[]'>
    readonly rivals: FieldRef<"Character", 'String[]'>
    readonly insightXp: FieldRef<"Character", 'Int'>
    readonly prowessXp: FieldRef<"Character", 'Int'>
    readonly resolveXp: FieldRef<"Character", 'Int'>
    readonly playbackXp: FieldRef<"Character", 'Int'>
    readonly harm: FieldRef<"Character", 'Json'>
    readonly specialArmor: FieldRef<"Character", 'Int'>
    readonly items: FieldRef<"Character", 'String[]'>
    readonly createdAt: FieldRef<"Character", 'DateTime'>
    readonly updatedAt: FieldRef<"Character", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findUniqueOrThrow
   */
  export type CharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findFirstOrThrow
   */
  export type CharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findMany
   */
  export type CharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Characters to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character create
   */
  export type CharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a Character.
     */
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }

  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Character createManyAndReturn
   */
  export type CharacterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Character update
   */
  export type CharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a Character.
     */
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
  }

  /**
   * Character upsert
   */
  export type CharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the Character to update in case it exists.
     */
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     */
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }

  /**
   * Character delete
   */
  export type CharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter which Character to delete.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characters to delete
     */
    where?: CharacterWhereInput
  }

  /**
   * Character.campaign
   */
  export type Character$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * Character.stand
   */
  export type Character$standArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    where?: StandWhereInput
  }

  /**
   * Character.rolls
   */
  export type Character$rollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    where?: RollWhereInput
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    cursor?: RollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RollScalarFieldEnum | RollScalarFieldEnum[]
  }

  /**
   * Character without action
   */
  export type CharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
  }


  /**
   * Model Stand
   */

  export type AggregateStand = {
    _count: StandCountAggregateOutputType | null
    _min: StandMinAggregateOutputType | null
    _max: StandMaxAggregateOutputType | null
  }

  export type StandMinAggregateOutputType = {
    id: string | null
    name: string | null
    characterId: string | null
    type: string | null
    form: string | null
    consciousness: string | null
    power: string | null
    speed: string | null
    range: string | null
    durability: string | null
    precision: string | null
    potential: string | null
    appearance: string | null
    manifestation: string | null
    specialTraits: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    characterId: string | null
    type: string | null
    form: string | null
    consciousness: string | null
    power: string | null
    speed: string | null
    range: string | null
    durability: string | null
    precision: string | null
    potential: string | null
    appearance: string | null
    manifestation: string | null
    specialTraits: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StandCountAggregateOutputType = {
    id: number
    name: number
    characterId: number
    type: number
    form: number
    consciousness: number
    power: number
    speed: number
    range: number
    durability: number
    precision: number
    potential: number
    appearance: number
    manifestation: number
    specialTraits: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StandMinAggregateInputType = {
    id?: true
    name?: true
    characterId?: true
    type?: true
    form?: true
    consciousness?: true
    power?: true
    speed?: true
    range?: true
    durability?: true
    precision?: true
    potential?: true
    appearance?: true
    manifestation?: true
    specialTraits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StandMaxAggregateInputType = {
    id?: true
    name?: true
    characterId?: true
    type?: true
    form?: true
    consciousness?: true
    power?: true
    speed?: true
    range?: true
    durability?: true
    precision?: true
    potential?: true
    appearance?: true
    manifestation?: true
    specialTraits?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StandCountAggregateInputType = {
    id?: true
    name?: true
    characterId?: true
    type?: true
    form?: true
    consciousness?: true
    power?: true
    speed?: true
    range?: true
    durability?: true
    precision?: true
    potential?: true
    appearance?: true
    manifestation?: true
    specialTraits?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stand to aggregate.
     */
    where?: StandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stands to fetch.
     */
    orderBy?: StandOrderByWithRelationInput | StandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stands
    **/
    _count?: true | StandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StandMaxAggregateInputType
  }

  export type GetStandAggregateType<T extends StandAggregateArgs> = {
        [P in keyof T & keyof AggregateStand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStand[P]>
      : GetScalarType<T[P], AggregateStand[P]>
  }




  export type StandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StandWhereInput
    orderBy?: StandOrderByWithAggregationInput | StandOrderByWithAggregationInput[]
    by: StandScalarFieldEnum[] | StandScalarFieldEnum
    having?: StandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StandCountAggregateInputType | true
    _min?: StandMinAggregateInputType
    _max?: StandMaxAggregateInputType
  }

  export type StandGroupByOutputType = {
    id: string
    name: string
    characterId: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation: string | null
    specialTraits: string | null
    createdAt: Date
    updatedAt: Date
    _count: StandCountAggregateOutputType | null
    _min: StandMinAggregateOutputType | null
    _max: StandMaxAggregateOutputType | null
  }

  type GetStandGroupByPayload<T extends StandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StandGroupByOutputType[P]>
            : GetScalarType<T[P], StandGroupByOutputType[P]>
        }
      >
    >


  export type StandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    characterId?: boolean
    type?: boolean
    form?: boolean
    consciousness?: boolean
    power?: boolean
    speed?: boolean
    range?: boolean
    durability?: boolean
    precision?: boolean
    potential?: boolean
    appearance?: boolean
    manifestation?: boolean
    specialTraits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    abilities?: boolean | Stand$abilitiesArgs<ExtArgs>
    _count?: boolean | StandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stand"]>

  export type StandSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    characterId?: boolean
    type?: boolean
    form?: boolean
    consciousness?: boolean
    power?: boolean
    speed?: boolean
    range?: boolean
    durability?: boolean
    precision?: boolean
    potential?: boolean
    appearance?: boolean
    manifestation?: boolean
    specialTraits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stand"]>

  export type StandSelectScalar = {
    id?: boolean
    name?: boolean
    characterId?: boolean
    type?: boolean
    form?: boolean
    consciousness?: boolean
    power?: boolean
    speed?: boolean
    range?: boolean
    durability?: boolean
    precision?: boolean
    potential?: boolean
    appearance?: boolean
    manifestation?: boolean
    specialTraits?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    abilities?: boolean | Stand$abilitiesArgs<ExtArgs>
    _count?: boolean | StandCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StandIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $StandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stand"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
      abilities: Prisma.$StandAbilityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      characterId: string
      type: string
      form: string
      consciousness: string
      power: string
      speed: string
      range: string
      durability: string
      precision: string
      potential: string
      appearance: string
      manifestation: string | null
      specialTraits: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stand"]>
    composites: {}
  }

  type StandGetPayload<S extends boolean | null | undefined | StandDefaultArgs> = $Result.GetResult<Prisma.$StandPayload, S>

  type StandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StandFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StandCountAggregateInputType | true
    }

  export interface StandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stand'], meta: { name: 'Stand' } }
    /**
     * Find zero or one Stand that matches the filter.
     * @param {StandFindUniqueArgs} args - Arguments to find a Stand
     * @example
     * // Get one Stand
     * const stand = await prisma.stand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StandFindUniqueArgs>(args: SelectSubset<T, StandFindUniqueArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Stand that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StandFindUniqueOrThrowArgs} args - Arguments to find a Stand
     * @example
     * // Get one Stand
     * const stand = await prisma.stand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StandFindUniqueOrThrowArgs>(args: SelectSubset<T, StandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Stand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandFindFirstArgs} args - Arguments to find a Stand
     * @example
     * // Get one Stand
     * const stand = await prisma.stand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StandFindFirstArgs>(args?: SelectSubset<T, StandFindFirstArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Stand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandFindFirstOrThrowArgs} args - Arguments to find a Stand
     * @example
     * // Get one Stand
     * const stand = await prisma.stand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StandFindFirstOrThrowArgs>(args?: SelectSubset<T, StandFindFirstOrThrowArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stands
     * const stands = await prisma.stand.findMany()
     * 
     * // Get first 10 Stands
     * const stands = await prisma.stand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const standWithIdOnly = await prisma.stand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StandFindManyArgs>(args?: SelectSubset<T, StandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Stand.
     * @param {StandCreateArgs} args - Arguments to create a Stand.
     * @example
     * // Create one Stand
     * const Stand = await prisma.stand.create({
     *   data: {
     *     // ... data to create a Stand
     *   }
     * })
     * 
     */
    create<T extends StandCreateArgs>(args: SelectSubset<T, StandCreateArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stands.
     * @param {StandCreateManyArgs} args - Arguments to create many Stands.
     * @example
     * // Create many Stands
     * const stand = await prisma.stand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StandCreateManyArgs>(args?: SelectSubset<T, StandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stands and returns the data saved in the database.
     * @param {StandCreateManyAndReturnArgs} args - Arguments to create many Stands.
     * @example
     * // Create many Stands
     * const stand = await prisma.stand.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stands and only return the `id`
     * const standWithIdOnly = await prisma.stand.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StandCreateManyAndReturnArgs>(args?: SelectSubset<T, StandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Stand.
     * @param {StandDeleteArgs} args - Arguments to delete one Stand.
     * @example
     * // Delete one Stand
     * const Stand = await prisma.stand.delete({
     *   where: {
     *     // ... filter to delete one Stand
     *   }
     * })
     * 
     */
    delete<T extends StandDeleteArgs>(args: SelectSubset<T, StandDeleteArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Stand.
     * @param {StandUpdateArgs} args - Arguments to update one Stand.
     * @example
     * // Update one Stand
     * const stand = await prisma.stand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StandUpdateArgs>(args: SelectSubset<T, StandUpdateArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stands.
     * @param {StandDeleteManyArgs} args - Arguments to filter Stands to delete.
     * @example
     * // Delete a few Stands
     * const { count } = await prisma.stand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StandDeleteManyArgs>(args?: SelectSubset<T, StandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stands
     * const stand = await prisma.stand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StandUpdateManyArgs>(args: SelectSubset<T, StandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stand.
     * @param {StandUpsertArgs} args - Arguments to update or create a Stand.
     * @example
     * // Update or create a Stand
     * const stand = await prisma.stand.upsert({
     *   create: {
     *     // ... data to create a Stand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stand we want to update
     *   }
     * })
     */
    upsert<T extends StandUpsertArgs>(args: SelectSubset<T, StandUpsertArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandCountArgs} args - Arguments to filter Stands to count.
     * @example
     * // Count the number of Stands
     * const count = await prisma.stand.count({
     *   where: {
     *     // ... the filter for the Stands we want to count
     *   }
     * })
    **/
    count<T extends StandCountArgs>(
      args?: Subset<T, StandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StandAggregateArgs>(args: Subset<T, StandAggregateArgs>): Prisma.PrismaPromise<GetStandAggregateType<T>>

    /**
     * Group by Stand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StandGroupByArgs['orderBy'] }
        : { orderBy?: StandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stand model
   */
  readonly fields: StandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    abilities<T extends Stand$abilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Stand$abilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stand model
   */ 
  interface StandFieldRefs {
    readonly id: FieldRef<"Stand", 'String'>
    readonly name: FieldRef<"Stand", 'String'>
    readonly characterId: FieldRef<"Stand", 'String'>
    readonly type: FieldRef<"Stand", 'String'>
    readonly form: FieldRef<"Stand", 'String'>
    readonly consciousness: FieldRef<"Stand", 'String'>
    readonly power: FieldRef<"Stand", 'String'>
    readonly speed: FieldRef<"Stand", 'String'>
    readonly range: FieldRef<"Stand", 'String'>
    readonly durability: FieldRef<"Stand", 'String'>
    readonly precision: FieldRef<"Stand", 'String'>
    readonly potential: FieldRef<"Stand", 'String'>
    readonly appearance: FieldRef<"Stand", 'String'>
    readonly manifestation: FieldRef<"Stand", 'String'>
    readonly specialTraits: FieldRef<"Stand", 'String'>
    readonly createdAt: FieldRef<"Stand", 'DateTime'>
    readonly updatedAt: FieldRef<"Stand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stand findUnique
   */
  export type StandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter, which Stand to fetch.
     */
    where: StandWhereUniqueInput
  }

  /**
   * Stand findUniqueOrThrow
   */
  export type StandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter, which Stand to fetch.
     */
    where: StandWhereUniqueInput
  }

  /**
   * Stand findFirst
   */
  export type StandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter, which Stand to fetch.
     */
    where?: StandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stands to fetch.
     */
    orderBy?: StandOrderByWithRelationInput | StandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stands.
     */
    cursor?: StandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stands.
     */
    distinct?: StandScalarFieldEnum | StandScalarFieldEnum[]
  }

  /**
   * Stand findFirstOrThrow
   */
  export type StandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter, which Stand to fetch.
     */
    where?: StandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stands to fetch.
     */
    orderBy?: StandOrderByWithRelationInput | StandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stands.
     */
    cursor?: StandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stands.
     */
    distinct?: StandScalarFieldEnum | StandScalarFieldEnum[]
  }

  /**
   * Stand findMany
   */
  export type StandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter, which Stands to fetch.
     */
    where?: StandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stands to fetch.
     */
    orderBy?: StandOrderByWithRelationInput | StandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stands.
     */
    cursor?: StandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stands.
     */
    skip?: number
    distinct?: StandScalarFieldEnum | StandScalarFieldEnum[]
  }

  /**
   * Stand create
   */
  export type StandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * The data needed to create a Stand.
     */
    data: XOR<StandCreateInput, StandUncheckedCreateInput>
  }

  /**
   * Stand createMany
   */
  export type StandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stands.
     */
    data: StandCreateManyInput | StandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stand createManyAndReturn
   */
  export type StandCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stands.
     */
    data: StandCreateManyInput | StandCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stand update
   */
  export type StandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * The data needed to update a Stand.
     */
    data: XOR<StandUpdateInput, StandUncheckedUpdateInput>
    /**
     * Choose, which Stand to update.
     */
    where: StandWhereUniqueInput
  }

  /**
   * Stand updateMany
   */
  export type StandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stands.
     */
    data: XOR<StandUpdateManyMutationInput, StandUncheckedUpdateManyInput>
    /**
     * Filter which Stands to update
     */
    where?: StandWhereInput
  }

  /**
   * Stand upsert
   */
  export type StandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * The filter to search for the Stand to update in case it exists.
     */
    where: StandWhereUniqueInput
    /**
     * In case the Stand found by the `where` argument doesn't exist, create a new Stand with this data.
     */
    create: XOR<StandCreateInput, StandUncheckedCreateInput>
    /**
     * In case the Stand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StandUpdateInput, StandUncheckedUpdateInput>
  }

  /**
   * Stand delete
   */
  export type StandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
    /**
     * Filter which Stand to delete.
     */
    where: StandWhereUniqueInput
  }

  /**
   * Stand deleteMany
   */
  export type StandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stands to delete
     */
    where?: StandWhereInput
  }

  /**
   * Stand.abilities
   */
  export type Stand$abilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    where?: StandAbilityWhereInput
    orderBy?: StandAbilityOrderByWithRelationInput | StandAbilityOrderByWithRelationInput[]
    cursor?: StandAbilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StandAbilityScalarFieldEnum | StandAbilityScalarFieldEnum[]
  }

  /**
   * Stand without action
   */
  export type StandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stand
     */
    select?: StandSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandInclude<ExtArgs> | null
  }


  /**
   * Model StandAbility
   */

  export type AggregateStandAbility = {
    _count: StandAbilityCountAggregateOutputType | null
    _min: StandAbilityMinAggregateOutputType | null
    _max: StandAbilityMaxAggregateOutputType | null
  }

  export type StandAbilityMinAggregateOutputType = {
    id: string | null
    name: string | null
    standId: string | null
    isUnique: boolean | null
    offenseUse: string | null
    defenseUse: string | null
    utilityUse: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StandAbilityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    standId: string | null
    isUnique: boolean | null
    offenseUse: string | null
    defenseUse: string | null
    utilityUse: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StandAbilityCountAggregateOutputType = {
    id: number
    name: number
    standId: number
    isUnique: number
    offenseUse: number
    defenseUse: number
    utilityUse: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StandAbilityMinAggregateInputType = {
    id?: true
    name?: true
    standId?: true
    isUnique?: true
    offenseUse?: true
    defenseUse?: true
    utilityUse?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StandAbilityMaxAggregateInputType = {
    id?: true
    name?: true
    standId?: true
    isUnique?: true
    offenseUse?: true
    defenseUse?: true
    utilityUse?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StandAbilityCountAggregateInputType = {
    id?: true
    name?: true
    standId?: true
    isUnique?: true
    offenseUse?: true
    defenseUse?: true
    utilityUse?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StandAbilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StandAbility to aggregate.
     */
    where?: StandAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StandAbilities to fetch.
     */
    orderBy?: StandAbilityOrderByWithRelationInput | StandAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StandAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StandAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StandAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StandAbilities
    **/
    _count?: true | StandAbilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StandAbilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StandAbilityMaxAggregateInputType
  }

  export type GetStandAbilityAggregateType<T extends StandAbilityAggregateArgs> = {
        [P in keyof T & keyof AggregateStandAbility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStandAbility[P]>
      : GetScalarType<T[P], AggregateStandAbility[P]>
  }




  export type StandAbilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StandAbilityWhereInput
    orderBy?: StandAbilityOrderByWithAggregationInput | StandAbilityOrderByWithAggregationInput[]
    by: StandAbilityScalarFieldEnum[] | StandAbilityScalarFieldEnum
    having?: StandAbilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StandAbilityCountAggregateInputType | true
    _min?: StandAbilityMinAggregateInputType
    _max?: StandAbilityMaxAggregateInputType
  }

  export type StandAbilityGroupByOutputType = {
    id: string
    name: string
    standId: string
    isUnique: boolean
    offenseUse: string | null
    defenseUse: string | null
    utilityUse: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: StandAbilityCountAggregateOutputType | null
    _min: StandAbilityMinAggregateOutputType | null
    _max: StandAbilityMaxAggregateOutputType | null
  }

  type GetStandAbilityGroupByPayload<T extends StandAbilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StandAbilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StandAbilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StandAbilityGroupByOutputType[P]>
            : GetScalarType<T[P], StandAbilityGroupByOutputType[P]>
        }
      >
    >


  export type StandAbilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    standId?: boolean
    isUnique?: boolean
    offenseUse?: boolean
    defenseUse?: boolean
    utilityUse?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stand?: boolean | StandDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["standAbility"]>

  export type StandAbilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    standId?: boolean
    isUnique?: boolean
    offenseUse?: boolean
    defenseUse?: boolean
    utilityUse?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stand?: boolean | StandDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["standAbility"]>

  export type StandAbilitySelectScalar = {
    id?: boolean
    name?: boolean
    standId?: boolean
    isUnique?: boolean
    offenseUse?: boolean
    defenseUse?: boolean
    utilityUse?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StandAbilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stand?: boolean | StandDefaultArgs<ExtArgs>
  }
  export type StandAbilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stand?: boolean | StandDefaultArgs<ExtArgs>
  }

  export type $StandAbilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StandAbility"
    objects: {
      stand: Prisma.$StandPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      standId: string
      isUnique: boolean
      offenseUse: string | null
      defenseUse: string | null
      utilityUse: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["standAbility"]>
    composites: {}
  }

  type StandAbilityGetPayload<S extends boolean | null | undefined | StandAbilityDefaultArgs> = $Result.GetResult<Prisma.$StandAbilityPayload, S>

  type StandAbilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StandAbilityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StandAbilityCountAggregateInputType | true
    }

  export interface StandAbilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StandAbility'], meta: { name: 'StandAbility' } }
    /**
     * Find zero or one StandAbility that matches the filter.
     * @param {StandAbilityFindUniqueArgs} args - Arguments to find a StandAbility
     * @example
     * // Get one StandAbility
     * const standAbility = await prisma.standAbility.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StandAbilityFindUniqueArgs>(args: SelectSubset<T, StandAbilityFindUniqueArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StandAbility that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StandAbilityFindUniqueOrThrowArgs} args - Arguments to find a StandAbility
     * @example
     * // Get one StandAbility
     * const standAbility = await prisma.standAbility.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StandAbilityFindUniqueOrThrowArgs>(args: SelectSubset<T, StandAbilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StandAbility that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityFindFirstArgs} args - Arguments to find a StandAbility
     * @example
     * // Get one StandAbility
     * const standAbility = await prisma.standAbility.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StandAbilityFindFirstArgs>(args?: SelectSubset<T, StandAbilityFindFirstArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StandAbility that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityFindFirstOrThrowArgs} args - Arguments to find a StandAbility
     * @example
     * // Get one StandAbility
     * const standAbility = await prisma.standAbility.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StandAbilityFindFirstOrThrowArgs>(args?: SelectSubset<T, StandAbilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StandAbilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StandAbilities
     * const standAbilities = await prisma.standAbility.findMany()
     * 
     * // Get first 10 StandAbilities
     * const standAbilities = await prisma.standAbility.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const standAbilityWithIdOnly = await prisma.standAbility.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StandAbilityFindManyArgs>(args?: SelectSubset<T, StandAbilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StandAbility.
     * @param {StandAbilityCreateArgs} args - Arguments to create a StandAbility.
     * @example
     * // Create one StandAbility
     * const StandAbility = await prisma.standAbility.create({
     *   data: {
     *     // ... data to create a StandAbility
     *   }
     * })
     * 
     */
    create<T extends StandAbilityCreateArgs>(args: SelectSubset<T, StandAbilityCreateArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StandAbilities.
     * @param {StandAbilityCreateManyArgs} args - Arguments to create many StandAbilities.
     * @example
     * // Create many StandAbilities
     * const standAbility = await prisma.standAbility.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StandAbilityCreateManyArgs>(args?: SelectSubset<T, StandAbilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StandAbilities and returns the data saved in the database.
     * @param {StandAbilityCreateManyAndReturnArgs} args - Arguments to create many StandAbilities.
     * @example
     * // Create many StandAbilities
     * const standAbility = await prisma.standAbility.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StandAbilities and only return the `id`
     * const standAbilityWithIdOnly = await prisma.standAbility.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StandAbilityCreateManyAndReturnArgs>(args?: SelectSubset<T, StandAbilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StandAbility.
     * @param {StandAbilityDeleteArgs} args - Arguments to delete one StandAbility.
     * @example
     * // Delete one StandAbility
     * const StandAbility = await prisma.standAbility.delete({
     *   where: {
     *     // ... filter to delete one StandAbility
     *   }
     * })
     * 
     */
    delete<T extends StandAbilityDeleteArgs>(args: SelectSubset<T, StandAbilityDeleteArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StandAbility.
     * @param {StandAbilityUpdateArgs} args - Arguments to update one StandAbility.
     * @example
     * // Update one StandAbility
     * const standAbility = await prisma.standAbility.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StandAbilityUpdateArgs>(args: SelectSubset<T, StandAbilityUpdateArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StandAbilities.
     * @param {StandAbilityDeleteManyArgs} args - Arguments to filter StandAbilities to delete.
     * @example
     * // Delete a few StandAbilities
     * const { count } = await prisma.standAbility.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StandAbilityDeleteManyArgs>(args?: SelectSubset<T, StandAbilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StandAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StandAbilities
     * const standAbility = await prisma.standAbility.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StandAbilityUpdateManyArgs>(args: SelectSubset<T, StandAbilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StandAbility.
     * @param {StandAbilityUpsertArgs} args - Arguments to update or create a StandAbility.
     * @example
     * // Update or create a StandAbility
     * const standAbility = await prisma.standAbility.upsert({
     *   create: {
     *     // ... data to create a StandAbility
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StandAbility we want to update
     *   }
     * })
     */
    upsert<T extends StandAbilityUpsertArgs>(args: SelectSubset<T, StandAbilityUpsertArgs<ExtArgs>>): Prisma__StandAbilityClient<$Result.GetResult<Prisma.$StandAbilityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StandAbilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityCountArgs} args - Arguments to filter StandAbilities to count.
     * @example
     * // Count the number of StandAbilities
     * const count = await prisma.standAbility.count({
     *   where: {
     *     // ... the filter for the StandAbilities we want to count
     *   }
     * })
    **/
    count<T extends StandAbilityCountArgs>(
      args?: Subset<T, StandAbilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StandAbilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StandAbility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StandAbilityAggregateArgs>(args: Subset<T, StandAbilityAggregateArgs>): Prisma.PrismaPromise<GetStandAbilityAggregateType<T>>

    /**
     * Group by StandAbility.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StandAbilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StandAbilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StandAbilityGroupByArgs['orderBy'] }
        : { orderBy?: StandAbilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StandAbilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStandAbilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StandAbility model
   */
  readonly fields: StandAbilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StandAbility.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StandAbilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stand<T extends StandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StandDefaultArgs<ExtArgs>>): Prisma__StandClient<$Result.GetResult<Prisma.$StandPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StandAbility model
   */ 
  interface StandAbilityFieldRefs {
    readonly id: FieldRef<"StandAbility", 'String'>
    readonly name: FieldRef<"StandAbility", 'String'>
    readonly standId: FieldRef<"StandAbility", 'String'>
    readonly isUnique: FieldRef<"StandAbility", 'Boolean'>
    readonly offenseUse: FieldRef<"StandAbility", 'String'>
    readonly defenseUse: FieldRef<"StandAbility", 'String'>
    readonly utilityUse: FieldRef<"StandAbility", 'String'>
    readonly description: FieldRef<"StandAbility", 'String'>
    readonly createdAt: FieldRef<"StandAbility", 'DateTime'>
    readonly updatedAt: FieldRef<"StandAbility", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StandAbility findUnique
   */
  export type StandAbilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter, which StandAbility to fetch.
     */
    where: StandAbilityWhereUniqueInput
  }

  /**
   * StandAbility findUniqueOrThrow
   */
  export type StandAbilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter, which StandAbility to fetch.
     */
    where: StandAbilityWhereUniqueInput
  }

  /**
   * StandAbility findFirst
   */
  export type StandAbilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter, which StandAbility to fetch.
     */
    where?: StandAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StandAbilities to fetch.
     */
    orderBy?: StandAbilityOrderByWithRelationInput | StandAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StandAbilities.
     */
    cursor?: StandAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StandAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StandAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StandAbilities.
     */
    distinct?: StandAbilityScalarFieldEnum | StandAbilityScalarFieldEnum[]
  }

  /**
   * StandAbility findFirstOrThrow
   */
  export type StandAbilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter, which StandAbility to fetch.
     */
    where?: StandAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StandAbilities to fetch.
     */
    orderBy?: StandAbilityOrderByWithRelationInput | StandAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StandAbilities.
     */
    cursor?: StandAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StandAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StandAbilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StandAbilities.
     */
    distinct?: StandAbilityScalarFieldEnum | StandAbilityScalarFieldEnum[]
  }

  /**
   * StandAbility findMany
   */
  export type StandAbilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter, which StandAbilities to fetch.
     */
    where?: StandAbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StandAbilities to fetch.
     */
    orderBy?: StandAbilityOrderByWithRelationInput | StandAbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StandAbilities.
     */
    cursor?: StandAbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StandAbilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StandAbilities.
     */
    skip?: number
    distinct?: StandAbilityScalarFieldEnum | StandAbilityScalarFieldEnum[]
  }

  /**
   * StandAbility create
   */
  export type StandAbilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * The data needed to create a StandAbility.
     */
    data: XOR<StandAbilityCreateInput, StandAbilityUncheckedCreateInput>
  }

  /**
   * StandAbility createMany
   */
  export type StandAbilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StandAbilities.
     */
    data: StandAbilityCreateManyInput | StandAbilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StandAbility createManyAndReturn
   */
  export type StandAbilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StandAbilities.
     */
    data: StandAbilityCreateManyInput | StandAbilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StandAbility update
   */
  export type StandAbilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * The data needed to update a StandAbility.
     */
    data: XOR<StandAbilityUpdateInput, StandAbilityUncheckedUpdateInput>
    /**
     * Choose, which StandAbility to update.
     */
    where: StandAbilityWhereUniqueInput
  }

  /**
   * StandAbility updateMany
   */
  export type StandAbilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StandAbilities.
     */
    data: XOR<StandAbilityUpdateManyMutationInput, StandAbilityUncheckedUpdateManyInput>
    /**
     * Filter which StandAbilities to update
     */
    where?: StandAbilityWhereInput
  }

  /**
   * StandAbility upsert
   */
  export type StandAbilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * The filter to search for the StandAbility to update in case it exists.
     */
    where: StandAbilityWhereUniqueInput
    /**
     * In case the StandAbility found by the `where` argument doesn't exist, create a new StandAbility with this data.
     */
    create: XOR<StandAbilityCreateInput, StandAbilityUncheckedCreateInput>
    /**
     * In case the StandAbility was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StandAbilityUpdateInput, StandAbilityUncheckedUpdateInput>
  }

  /**
   * StandAbility delete
   */
  export type StandAbilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
    /**
     * Filter which StandAbility to delete.
     */
    where: StandAbilityWhereUniqueInput
  }

  /**
   * StandAbility deleteMany
   */
  export type StandAbilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StandAbilities to delete
     */
    where?: StandAbilityWhereInput
  }

  /**
   * StandAbility without action
   */
  export type StandAbilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StandAbility
     */
    select?: StandAbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StandAbilityInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    tier: number | null
  }

  export type CampaignSumAggregateOutputType = {
    tier: number | null
  }

  export type CampaignMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    dmId: string | null
    tier: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    dmId: string | null
    tier: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    name: number
    description: number
    dmId: number
    tier: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    tier?: true
  }

  export type CampaignSumAggregateInputType = {
    tier?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dmId?: true
    tier?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dmId?: true
    tier?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dmId?: true
    tier?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: string
    name: string
    description: string | null
    dmId: string
    tier: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    dmId?: boolean
    tier?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dm?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Campaign$playersArgs<ExtArgs>
    characters?: boolean | Campaign$charactersArgs<ExtArgs>
    clocks?: boolean | Campaign$clocksArgs<ExtArgs>
    rolls?: boolean | Campaign$rollsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    dmId?: boolean
    tier?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dm?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    dmId?: boolean
    tier?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dm?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Campaign$playersArgs<ExtArgs>
    characters?: boolean | Campaign$charactersArgs<ExtArgs>
    clocks?: boolean | Campaign$clocksArgs<ExtArgs>
    rolls?: boolean | Campaign$rollsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dm?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      dm: Prisma.$UserPayload<ExtArgs>
      players: Prisma.$UserPayload<ExtArgs>[]
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      clocks: Prisma.$ClockPayload<ExtArgs>[]
      rolls: Prisma.$RollPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      dmId: string
      tier: number
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dm<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    players<T extends Campaign$playersArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    characters<T extends Campaign$charactersArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany"> | Null>
    clocks<T extends Campaign$clocksArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$clocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findMany"> | Null>
    rolls<T extends Campaign$rollsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$rollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */ 
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'String'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly description: FieldRef<"Campaign", 'String'>
    readonly dmId: FieldRef<"Campaign", 'String'>
    readonly tier: FieldRef<"Campaign", 'Int'>
    readonly status: FieldRef<"Campaign", 'String'>
    readonly createdAt: FieldRef<"Campaign", 'DateTime'>
    readonly updatedAt: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign.players
   */
  export type Campaign$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Campaign.characters
   */
  export type Campaign$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Campaign.clocks
   */
  export type Campaign$clocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    where?: ClockWhereInput
    orderBy?: ClockOrderByWithRelationInput | ClockOrderByWithRelationInput[]
    cursor?: ClockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClockScalarFieldEnum | ClockScalarFieldEnum[]
  }

  /**
   * Campaign.rolls
   */
  export type Campaign$rollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    where?: RollWhereInput
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    cursor?: RollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RollScalarFieldEnum | RollScalarFieldEnum[]
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model Clock
   */

  export type AggregateClock = {
    _count: ClockCountAggregateOutputType | null
    _avg: ClockAvgAggregateOutputType | null
    _sum: ClockSumAggregateOutputType | null
    _min: ClockMinAggregateOutputType | null
    _max: ClockMaxAggregateOutputType | null
  }

  export type ClockAvgAggregateOutputType = {
    segments: number | null
    filled: number | null
  }

  export type ClockSumAggregateOutputType = {
    segments: number | null
    filled: number | null
  }

  export type ClockMinAggregateOutputType = {
    id: string | null
    name: string | null
    segments: number | null
    filled: number | null
    campaignId: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClockMaxAggregateOutputType = {
    id: string | null
    name: string | null
    segments: number | null
    filled: number | null
    campaignId: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClockCountAggregateOutputType = {
    id: number
    name: number
    segments: number
    filled: number
    campaignId: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClockAvgAggregateInputType = {
    segments?: true
    filled?: true
  }

  export type ClockSumAggregateInputType = {
    segments?: true
    filled?: true
  }

  export type ClockMinAggregateInputType = {
    id?: true
    name?: true
    segments?: true
    filled?: true
    campaignId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClockMaxAggregateInputType = {
    id?: true
    name?: true
    segments?: true
    filled?: true
    campaignId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClockCountAggregateInputType = {
    id?: true
    name?: true
    segments?: true
    filled?: true
    campaignId?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clock to aggregate.
     */
    where?: ClockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clocks to fetch.
     */
    orderBy?: ClockOrderByWithRelationInput | ClockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clocks
    **/
    _count?: true | ClockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClockMaxAggregateInputType
  }

  export type GetClockAggregateType<T extends ClockAggregateArgs> = {
        [P in keyof T & keyof AggregateClock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClock[P]>
      : GetScalarType<T[P], AggregateClock[P]>
  }




  export type ClockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClockWhereInput
    orderBy?: ClockOrderByWithAggregationInput | ClockOrderByWithAggregationInput[]
    by: ClockScalarFieldEnum[] | ClockScalarFieldEnum
    having?: ClockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClockCountAggregateInputType | true
    _avg?: ClockAvgAggregateInputType
    _sum?: ClockSumAggregateInputType
    _min?: ClockMinAggregateInputType
    _max?: ClockMaxAggregateInputType
  }

  export type ClockGroupByOutputType = {
    id: string
    name: string
    segments: number
    filled: number
    campaignId: string
    type: string
    createdAt: Date
    updatedAt: Date
    _count: ClockCountAggregateOutputType | null
    _avg: ClockAvgAggregateOutputType | null
    _sum: ClockSumAggregateOutputType | null
    _min: ClockMinAggregateOutputType | null
    _max: ClockMaxAggregateOutputType | null
  }

  type GetClockGroupByPayload<T extends ClockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClockGroupByOutputType[P]>
            : GetScalarType<T[P], ClockGroupByOutputType[P]>
        }
      >
    >


  export type ClockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    segments?: boolean
    filled?: boolean
    campaignId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clock"]>

  export type ClockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    segments?: boolean
    filled?: boolean
    campaignId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clock"]>

  export type ClockSelectScalar = {
    id?: boolean
    name?: boolean
    segments?: boolean
    filled?: boolean
    campaignId?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type ClockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $ClockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clock"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      segments: number
      filled: number
      campaignId: string
      type: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clock"]>
    composites: {}
  }

  type ClockGetPayload<S extends boolean | null | undefined | ClockDefaultArgs> = $Result.GetResult<Prisma.$ClockPayload, S>

  type ClockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClockCountAggregateInputType | true
    }

  export interface ClockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clock'], meta: { name: 'Clock' } }
    /**
     * Find zero or one Clock that matches the filter.
     * @param {ClockFindUniqueArgs} args - Arguments to find a Clock
     * @example
     * // Get one Clock
     * const clock = await prisma.clock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClockFindUniqueArgs>(args: SelectSubset<T, ClockFindUniqueArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Clock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClockFindUniqueOrThrowArgs} args - Arguments to find a Clock
     * @example
     * // Get one Clock
     * const clock = await prisma.clock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClockFindUniqueOrThrowArgs>(args: SelectSubset<T, ClockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Clock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockFindFirstArgs} args - Arguments to find a Clock
     * @example
     * // Get one Clock
     * const clock = await prisma.clock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClockFindFirstArgs>(args?: SelectSubset<T, ClockFindFirstArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Clock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockFindFirstOrThrowArgs} args - Arguments to find a Clock
     * @example
     * // Get one Clock
     * const clock = await prisma.clock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClockFindFirstOrThrowArgs>(args?: SelectSubset<T, ClockFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clocks
     * const clocks = await prisma.clock.findMany()
     * 
     * // Get first 10 Clocks
     * const clocks = await prisma.clock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clockWithIdOnly = await prisma.clock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClockFindManyArgs>(args?: SelectSubset<T, ClockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Clock.
     * @param {ClockCreateArgs} args - Arguments to create a Clock.
     * @example
     * // Create one Clock
     * const Clock = await prisma.clock.create({
     *   data: {
     *     // ... data to create a Clock
     *   }
     * })
     * 
     */
    create<T extends ClockCreateArgs>(args: SelectSubset<T, ClockCreateArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clocks.
     * @param {ClockCreateManyArgs} args - Arguments to create many Clocks.
     * @example
     * // Create many Clocks
     * const clock = await prisma.clock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClockCreateManyArgs>(args?: SelectSubset<T, ClockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clocks and returns the data saved in the database.
     * @param {ClockCreateManyAndReturnArgs} args - Arguments to create many Clocks.
     * @example
     * // Create many Clocks
     * const clock = await prisma.clock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clocks and only return the `id`
     * const clockWithIdOnly = await prisma.clock.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClockCreateManyAndReturnArgs>(args?: SelectSubset<T, ClockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Clock.
     * @param {ClockDeleteArgs} args - Arguments to delete one Clock.
     * @example
     * // Delete one Clock
     * const Clock = await prisma.clock.delete({
     *   where: {
     *     // ... filter to delete one Clock
     *   }
     * })
     * 
     */
    delete<T extends ClockDeleteArgs>(args: SelectSubset<T, ClockDeleteArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Clock.
     * @param {ClockUpdateArgs} args - Arguments to update one Clock.
     * @example
     * // Update one Clock
     * const clock = await prisma.clock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClockUpdateArgs>(args: SelectSubset<T, ClockUpdateArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clocks.
     * @param {ClockDeleteManyArgs} args - Arguments to filter Clocks to delete.
     * @example
     * // Delete a few Clocks
     * const { count } = await prisma.clock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClockDeleteManyArgs>(args?: SelectSubset<T, ClockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clocks
     * const clock = await prisma.clock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClockUpdateManyArgs>(args: SelectSubset<T, ClockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clock.
     * @param {ClockUpsertArgs} args - Arguments to update or create a Clock.
     * @example
     * // Update or create a Clock
     * const clock = await prisma.clock.upsert({
     *   create: {
     *     // ... data to create a Clock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clock we want to update
     *   }
     * })
     */
    upsert<T extends ClockUpsertArgs>(args: SelectSubset<T, ClockUpsertArgs<ExtArgs>>): Prisma__ClockClient<$Result.GetResult<Prisma.$ClockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockCountArgs} args - Arguments to filter Clocks to count.
     * @example
     * // Count the number of Clocks
     * const count = await prisma.clock.count({
     *   where: {
     *     // ... the filter for the Clocks we want to count
     *   }
     * })
    **/
    count<T extends ClockCountArgs>(
      args?: Subset<T, ClockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClockAggregateArgs>(args: Subset<T, ClockAggregateArgs>): Prisma.PrismaPromise<GetClockAggregateType<T>>

    /**
     * Group by Clock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClockGroupByArgs['orderBy'] }
        : { orderBy?: ClockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clock model
   */
  readonly fields: ClockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clock model
   */ 
  interface ClockFieldRefs {
    readonly id: FieldRef<"Clock", 'String'>
    readonly name: FieldRef<"Clock", 'String'>
    readonly segments: FieldRef<"Clock", 'Int'>
    readonly filled: FieldRef<"Clock", 'Int'>
    readonly campaignId: FieldRef<"Clock", 'String'>
    readonly type: FieldRef<"Clock", 'String'>
    readonly createdAt: FieldRef<"Clock", 'DateTime'>
    readonly updatedAt: FieldRef<"Clock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Clock findUnique
   */
  export type ClockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter, which Clock to fetch.
     */
    where: ClockWhereUniqueInput
  }

  /**
   * Clock findUniqueOrThrow
   */
  export type ClockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter, which Clock to fetch.
     */
    where: ClockWhereUniqueInput
  }

  /**
   * Clock findFirst
   */
  export type ClockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter, which Clock to fetch.
     */
    where?: ClockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clocks to fetch.
     */
    orderBy?: ClockOrderByWithRelationInput | ClockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clocks.
     */
    cursor?: ClockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clocks.
     */
    distinct?: ClockScalarFieldEnum | ClockScalarFieldEnum[]
  }

  /**
   * Clock findFirstOrThrow
   */
  export type ClockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter, which Clock to fetch.
     */
    where?: ClockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clocks to fetch.
     */
    orderBy?: ClockOrderByWithRelationInput | ClockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clocks.
     */
    cursor?: ClockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clocks.
     */
    distinct?: ClockScalarFieldEnum | ClockScalarFieldEnum[]
  }

  /**
   * Clock findMany
   */
  export type ClockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter, which Clocks to fetch.
     */
    where?: ClockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clocks to fetch.
     */
    orderBy?: ClockOrderByWithRelationInput | ClockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clocks.
     */
    cursor?: ClockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clocks.
     */
    skip?: number
    distinct?: ClockScalarFieldEnum | ClockScalarFieldEnum[]
  }

  /**
   * Clock create
   */
  export type ClockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * The data needed to create a Clock.
     */
    data: XOR<ClockCreateInput, ClockUncheckedCreateInput>
  }

  /**
   * Clock createMany
   */
  export type ClockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clocks.
     */
    data: ClockCreateManyInput | ClockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clock createManyAndReturn
   */
  export type ClockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clocks.
     */
    data: ClockCreateManyInput | ClockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Clock update
   */
  export type ClockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * The data needed to update a Clock.
     */
    data: XOR<ClockUpdateInput, ClockUncheckedUpdateInput>
    /**
     * Choose, which Clock to update.
     */
    where: ClockWhereUniqueInput
  }

  /**
   * Clock updateMany
   */
  export type ClockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clocks.
     */
    data: XOR<ClockUpdateManyMutationInput, ClockUncheckedUpdateManyInput>
    /**
     * Filter which Clocks to update
     */
    where?: ClockWhereInput
  }

  /**
   * Clock upsert
   */
  export type ClockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * The filter to search for the Clock to update in case it exists.
     */
    where: ClockWhereUniqueInput
    /**
     * In case the Clock found by the `where` argument doesn't exist, create a new Clock with this data.
     */
    create: XOR<ClockCreateInput, ClockUncheckedCreateInput>
    /**
     * In case the Clock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClockUpdateInput, ClockUncheckedUpdateInput>
  }

  /**
   * Clock delete
   */
  export type ClockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
    /**
     * Filter which Clock to delete.
     */
    where: ClockWhereUniqueInput
  }

  /**
   * Clock deleteMany
   */
  export type ClockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clocks to delete
     */
    where?: ClockWhereInput
  }

  /**
   * Clock without action
   */
  export type ClockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clock
     */
    select?: ClockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClockInclude<ExtArgs> | null
  }


  /**
   * Model Roll
   */

  export type AggregateRoll = {
    _count: RollCountAggregateOutputType | null
    _avg: RollAvgAggregateOutputType | null
    _sum: RollSumAggregateOutputType | null
    _min: RollMinAggregateOutputType | null
    _max: RollMaxAggregateOutputType | null
  }

  export type RollAvgAggregateOutputType = {
    dice: number | null
    results: number | null
  }

  export type RollSumAggregateOutputType = {
    dice: number | null
    results: number[]
  }

  export type RollMinAggregateOutputType = {
    id: string | null
    characterId: string | null
    campaignId: string | null
    rollType: string | null
    actionType: string | null
    position: string | null
    effect: string | null
    dice: number | null
    outcome: string | null
    createdAt: Date | null
  }

  export type RollMaxAggregateOutputType = {
    id: string | null
    characterId: string | null
    campaignId: string | null
    rollType: string | null
    actionType: string | null
    position: string | null
    effect: string | null
    dice: number | null
    outcome: string | null
    createdAt: Date | null
  }

  export type RollCountAggregateOutputType = {
    id: number
    characterId: number
    campaignId: number
    rollType: number
    actionType: number
    position: number
    effect: number
    dice: number
    results: number
    outcome: number
    createdAt: number
    _all: number
  }


  export type RollAvgAggregateInputType = {
    dice?: true
    results?: true
  }

  export type RollSumAggregateInputType = {
    dice?: true
    results?: true
  }

  export type RollMinAggregateInputType = {
    id?: true
    characterId?: true
    campaignId?: true
    rollType?: true
    actionType?: true
    position?: true
    effect?: true
    dice?: true
    outcome?: true
    createdAt?: true
  }

  export type RollMaxAggregateInputType = {
    id?: true
    characterId?: true
    campaignId?: true
    rollType?: true
    actionType?: true
    position?: true
    effect?: true
    dice?: true
    outcome?: true
    createdAt?: true
  }

  export type RollCountAggregateInputType = {
    id?: true
    characterId?: true
    campaignId?: true
    rollType?: true
    actionType?: true
    position?: true
    effect?: true
    dice?: true
    results?: true
    outcome?: true
    createdAt?: true
    _all?: true
  }

  export type RollAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roll to aggregate.
     */
    where?: RollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rolls to fetch.
     */
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rolls
    **/
    _count?: true | RollCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RollAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RollSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RollMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RollMaxAggregateInputType
  }

  export type GetRollAggregateType<T extends RollAggregateArgs> = {
        [P in keyof T & keyof AggregateRoll]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoll[P]>
      : GetScalarType<T[P], AggregateRoll[P]>
  }




  export type RollGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollWhereInput
    orderBy?: RollOrderByWithAggregationInput | RollOrderByWithAggregationInput[]
    by: RollScalarFieldEnum[] | RollScalarFieldEnum
    having?: RollScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RollCountAggregateInputType | true
    _avg?: RollAvgAggregateInputType
    _sum?: RollSumAggregateInputType
    _min?: RollMinAggregateInputType
    _max?: RollMaxAggregateInputType
  }

  export type RollGroupByOutputType = {
    id: string
    characterId: string
    campaignId: string
    rollType: string
    actionType: string | null
    position: string
    effect: string
    dice: number
    results: number[]
    outcome: string
    createdAt: Date
    _count: RollCountAggregateOutputType | null
    _avg: RollAvgAggregateOutputType | null
    _sum: RollSumAggregateOutputType | null
    _min: RollMinAggregateOutputType | null
    _max: RollMaxAggregateOutputType | null
  }

  type GetRollGroupByPayload<T extends RollGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RollGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RollGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RollGroupByOutputType[P]>
            : GetScalarType<T[P], RollGroupByOutputType[P]>
        }
      >
    >


  export type RollSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    campaignId?: boolean
    rollType?: boolean
    actionType?: boolean
    position?: boolean
    effect?: boolean
    dice?: boolean
    results?: boolean
    outcome?: boolean
    createdAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roll"]>

  export type RollSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    characterId?: boolean
    campaignId?: boolean
    rollType?: boolean
    actionType?: boolean
    position?: boolean
    effect?: boolean
    dice?: boolean
    results?: boolean
    outcome?: boolean
    createdAt?: boolean
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roll"]>

  export type RollSelectScalar = {
    id?: boolean
    characterId?: boolean
    campaignId?: boolean
    rollType?: boolean
    actionType?: boolean
    position?: boolean
    effect?: boolean
    dice?: boolean
    results?: boolean
    outcome?: boolean
    createdAt?: boolean
  }

  export type RollInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }
  export type RollIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | CharacterDefaultArgs<ExtArgs>
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
  }

  export type $RollPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roll"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs>
      campaign: Prisma.$CampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      characterId: string
      campaignId: string
      rollType: string
      actionType: string | null
      position: string
      effect: string
      dice: number
      results: number[]
      outcome: string
      createdAt: Date
    }, ExtArgs["result"]["roll"]>
    composites: {}
  }

  type RollGetPayload<S extends boolean | null | undefined | RollDefaultArgs> = $Result.GetResult<Prisma.$RollPayload, S>

  type RollCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RollFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RollCountAggregateInputType | true
    }

  export interface RollDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roll'], meta: { name: 'Roll' } }
    /**
     * Find zero or one Roll that matches the filter.
     * @param {RollFindUniqueArgs} args - Arguments to find a Roll
     * @example
     * // Get one Roll
     * const roll = await prisma.roll.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RollFindUniqueArgs>(args: SelectSubset<T, RollFindUniqueArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Roll that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RollFindUniqueOrThrowArgs} args - Arguments to find a Roll
     * @example
     * // Get one Roll
     * const roll = await prisma.roll.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RollFindUniqueOrThrowArgs>(args: SelectSubset<T, RollFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Roll that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollFindFirstArgs} args - Arguments to find a Roll
     * @example
     * // Get one Roll
     * const roll = await prisma.roll.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RollFindFirstArgs>(args?: SelectSubset<T, RollFindFirstArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Roll that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollFindFirstOrThrowArgs} args - Arguments to find a Roll
     * @example
     * // Get one Roll
     * const roll = await prisma.roll.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RollFindFirstOrThrowArgs>(args?: SelectSubset<T, RollFindFirstOrThrowArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rolls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rolls
     * const rolls = await prisma.roll.findMany()
     * 
     * // Get first 10 Rolls
     * const rolls = await prisma.roll.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rollWithIdOnly = await prisma.roll.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RollFindManyArgs>(args?: SelectSubset<T, RollFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Roll.
     * @param {RollCreateArgs} args - Arguments to create a Roll.
     * @example
     * // Create one Roll
     * const Roll = await prisma.roll.create({
     *   data: {
     *     // ... data to create a Roll
     *   }
     * })
     * 
     */
    create<T extends RollCreateArgs>(args: SelectSubset<T, RollCreateArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rolls.
     * @param {RollCreateManyArgs} args - Arguments to create many Rolls.
     * @example
     * // Create many Rolls
     * const roll = await prisma.roll.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RollCreateManyArgs>(args?: SelectSubset<T, RollCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rolls and returns the data saved in the database.
     * @param {RollCreateManyAndReturnArgs} args - Arguments to create many Rolls.
     * @example
     * // Create many Rolls
     * const roll = await prisma.roll.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rolls and only return the `id`
     * const rollWithIdOnly = await prisma.roll.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RollCreateManyAndReturnArgs>(args?: SelectSubset<T, RollCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Roll.
     * @param {RollDeleteArgs} args - Arguments to delete one Roll.
     * @example
     * // Delete one Roll
     * const Roll = await prisma.roll.delete({
     *   where: {
     *     // ... filter to delete one Roll
     *   }
     * })
     * 
     */
    delete<T extends RollDeleteArgs>(args: SelectSubset<T, RollDeleteArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Roll.
     * @param {RollUpdateArgs} args - Arguments to update one Roll.
     * @example
     * // Update one Roll
     * const roll = await prisma.roll.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RollUpdateArgs>(args: SelectSubset<T, RollUpdateArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rolls.
     * @param {RollDeleteManyArgs} args - Arguments to filter Rolls to delete.
     * @example
     * // Delete a few Rolls
     * const { count } = await prisma.roll.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RollDeleteManyArgs>(args?: SelectSubset<T, RollDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rolls
     * const roll = await prisma.roll.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RollUpdateManyArgs>(args: SelectSubset<T, RollUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roll.
     * @param {RollUpsertArgs} args - Arguments to update or create a Roll.
     * @example
     * // Update or create a Roll
     * const roll = await prisma.roll.upsert({
     *   create: {
     *     // ... data to create a Roll
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roll we want to update
     *   }
     * })
     */
    upsert<T extends RollUpsertArgs>(args: SelectSubset<T, RollUpsertArgs<ExtArgs>>): Prisma__RollClient<$Result.GetResult<Prisma.$RollPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCountArgs} args - Arguments to filter Rolls to count.
     * @example
     * // Count the number of Rolls
     * const count = await prisma.roll.count({
     *   where: {
     *     // ... the filter for the Rolls we want to count
     *   }
     * })
    **/
    count<T extends RollCountArgs>(
      args?: Subset<T, RollCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RollCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RollAggregateArgs>(args: Subset<T, RollAggregateArgs>): Prisma.PrismaPromise<GetRollAggregateType<T>>

    /**
     * Group by Roll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RollGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RollGroupByArgs['orderBy'] }
        : { orderBy?: RollGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roll model
   */
  readonly fields: RollFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roll.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RollClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Roll model
   */ 
  interface RollFieldRefs {
    readonly id: FieldRef<"Roll", 'String'>
    readonly characterId: FieldRef<"Roll", 'String'>
    readonly campaignId: FieldRef<"Roll", 'String'>
    readonly rollType: FieldRef<"Roll", 'String'>
    readonly actionType: FieldRef<"Roll", 'String'>
    readonly position: FieldRef<"Roll", 'String'>
    readonly effect: FieldRef<"Roll", 'String'>
    readonly dice: FieldRef<"Roll", 'Int'>
    readonly results: FieldRef<"Roll", 'Int[]'>
    readonly outcome: FieldRef<"Roll", 'String'>
    readonly createdAt: FieldRef<"Roll", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Roll findUnique
   */
  export type RollFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter, which Roll to fetch.
     */
    where: RollWhereUniqueInput
  }

  /**
   * Roll findUniqueOrThrow
   */
  export type RollFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter, which Roll to fetch.
     */
    where: RollWhereUniqueInput
  }

  /**
   * Roll findFirst
   */
  export type RollFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter, which Roll to fetch.
     */
    where?: RollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rolls to fetch.
     */
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rolls.
     */
    cursor?: RollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rolls.
     */
    distinct?: RollScalarFieldEnum | RollScalarFieldEnum[]
  }

  /**
   * Roll findFirstOrThrow
   */
  export type RollFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter, which Roll to fetch.
     */
    where?: RollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rolls to fetch.
     */
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rolls.
     */
    cursor?: RollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rolls.
     */
    distinct?: RollScalarFieldEnum | RollScalarFieldEnum[]
  }

  /**
   * Roll findMany
   */
  export type RollFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter, which Rolls to fetch.
     */
    where?: RollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rolls to fetch.
     */
    orderBy?: RollOrderByWithRelationInput | RollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rolls.
     */
    cursor?: RollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rolls.
     */
    skip?: number
    distinct?: RollScalarFieldEnum | RollScalarFieldEnum[]
  }

  /**
   * Roll create
   */
  export type RollCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * The data needed to create a Roll.
     */
    data: XOR<RollCreateInput, RollUncheckedCreateInput>
  }

  /**
   * Roll createMany
   */
  export type RollCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rolls.
     */
    data: RollCreateManyInput | RollCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roll createManyAndReturn
   */
  export type RollCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rolls.
     */
    data: RollCreateManyInput | RollCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Roll update
   */
  export type RollUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * The data needed to update a Roll.
     */
    data: XOR<RollUpdateInput, RollUncheckedUpdateInput>
    /**
     * Choose, which Roll to update.
     */
    where: RollWhereUniqueInput
  }

  /**
   * Roll updateMany
   */
  export type RollUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rolls.
     */
    data: XOR<RollUpdateManyMutationInput, RollUncheckedUpdateManyInput>
    /**
     * Filter which Rolls to update
     */
    where?: RollWhereInput
  }

  /**
   * Roll upsert
   */
  export type RollUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * The filter to search for the Roll to update in case it exists.
     */
    where: RollWhereUniqueInput
    /**
     * In case the Roll found by the `where` argument doesn't exist, create a new Roll with this data.
     */
    create: XOR<RollCreateInput, RollUncheckedCreateInput>
    /**
     * In case the Roll was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RollUpdateInput, RollUncheckedUpdateInput>
  }

  /**
   * Roll delete
   */
  export type RollDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
    /**
     * Filter which Roll to delete.
     */
    where: RollWhereUniqueInput
  }

  /**
   * Roll deleteMany
   */
  export type RollDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rolls to delete
     */
    where?: RollWhereInput
  }

  /**
   * Roll without action
   */
  export type RollDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roll
     */
    select?: RollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    passwordHash: 'passwordHash',
    googleId: 'googleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CharacterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    campaignId: 'campaignId',
    origin: 'origin',
    tier: 'tier',
    hunt: 'hunt',
    study: 'study',
    survey: 'survey',
    tinker: 'tinker',
    finesse: 'finesse',
    prowl: 'prowl',
    skirmish: 'skirmish',
    wreck: 'wreck',
    bizarre: 'bizarre',
    command: 'command',
    consort: 'consort',
    sway: 'sway',
    stress: 'stress',
    maxStress: 'maxStress',
    trauma: 'trauma',
    traumaConditions: 'traumaConditions',
    vice: 'vice',
    vicePurveyor: 'vicePurveyor',
    friends: 'friends',
    rivals: 'rivals',
    insightXp: 'insightXp',
    prowessXp: 'prowessXp',
    resolveXp: 'resolveXp',
    playbackXp: 'playbackXp',
    harm: 'harm',
    specialArmor: 'specialArmor',
    items: 'items',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const StandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    characterId: 'characterId',
    type: 'type',
    form: 'form',
    consciousness: 'consciousness',
    power: 'power',
    speed: 'speed',
    range: 'range',
    durability: 'durability',
    precision: 'precision',
    potential: 'potential',
    appearance: 'appearance',
    manifestation: 'manifestation',
    specialTraits: 'specialTraits',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StandScalarFieldEnum = (typeof StandScalarFieldEnum)[keyof typeof StandScalarFieldEnum]


  export const StandAbilityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    standId: 'standId',
    isUnique: 'isUnique',
    offenseUse: 'offenseUse',
    defenseUse: 'defenseUse',
    utilityUse: 'utilityUse',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StandAbilityScalarFieldEnum = (typeof StandAbilityScalarFieldEnum)[keyof typeof StandAbilityScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    dmId: 'dmId',
    tier: 'tier',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const ClockScalarFieldEnum: {
    id: 'id',
    name: 'name',
    segments: 'segments',
    filled: 'filled',
    campaignId: 'campaignId',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClockScalarFieldEnum = (typeof ClockScalarFieldEnum)[keyof typeof ClockScalarFieldEnum]


  export const RollScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    campaignId: 'campaignId',
    rollType: 'rollType',
    actionType: 'actionType',
    position: 'position',
    effect: 'effect',
    dice: 'dice',
    results: 'results',
    outcome: 'outcome',
    createdAt: 'createdAt'
  };

  export type RollScalarFieldEnum = (typeof RollScalarFieldEnum)[keyof typeof RollScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    campaigns?: CampaignListRelationFilter
    dmCampaigns?: CampaignListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    characters?: CharacterOrderByRelationAggregateInput
    campaigns?: CampaignOrderByRelationAggregateInput
    dmCampaigns?: CampaignOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    googleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    characters?: CharacterListRelationFilter
    campaigns?: CampaignListRelationFilter
    dmCampaigns?: CampaignListRelationFilter
  }, "id" | "email" | "username" | "googleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CharacterWhereInput = {
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    id?: StringFilter<"Character"> | string
    name?: StringFilter<"Character"> | string
    userId?: StringFilter<"Character"> | string
    campaignId?: StringNullableFilter<"Character"> | string | null
    origin?: StringFilter<"Character"> | string
    tier?: IntFilter<"Character"> | number
    hunt?: IntFilter<"Character"> | number
    study?: IntFilter<"Character"> | number
    survey?: IntFilter<"Character"> | number
    tinker?: IntFilter<"Character"> | number
    finesse?: IntFilter<"Character"> | number
    prowl?: IntFilter<"Character"> | number
    skirmish?: IntFilter<"Character"> | number
    wreck?: IntFilter<"Character"> | number
    bizarre?: IntFilter<"Character"> | number
    command?: IntFilter<"Character"> | number
    consort?: IntFilter<"Character"> | number
    sway?: IntFilter<"Character"> | number
    stress?: IntFilter<"Character"> | number
    maxStress?: IntFilter<"Character"> | number
    trauma?: IntFilter<"Character"> | number
    traumaConditions?: StringNullableListFilter<"Character">
    vice?: StringFilter<"Character"> | string
    vicePurveyor?: StringFilter<"Character"> | string
    friends?: StringNullableListFilter<"Character">
    rivals?: StringNullableListFilter<"Character">
    insightXp?: IntFilter<"Character"> | number
    prowessXp?: IntFilter<"Character"> | number
    resolveXp?: IntFilter<"Character"> | number
    playbackXp?: IntFilter<"Character"> | number
    harm?: JsonFilter<"Character">
    specialArmor?: IntFilter<"Character"> | number
    items?: StringNullableListFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignNullableRelationFilter, CampaignWhereInput> | null
    stand?: XOR<StandNullableRelationFilter, StandWhereInput> | null
    rolls?: RollListRelationFilter
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrderInput | SortOrder
    origin?: SortOrder
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    traumaConditions?: SortOrder
    vice?: SortOrder
    vicePurveyor?: SortOrder
    friends?: SortOrder
    rivals?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    harm?: SortOrder
    specialArmor?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    campaign?: CampaignOrderByWithRelationInput
    stand?: StandOrderByWithRelationInput
    rolls?: RollOrderByRelationAggregateInput
  }

  export type CharacterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    name?: StringFilter<"Character"> | string
    userId?: StringFilter<"Character"> | string
    campaignId?: StringNullableFilter<"Character"> | string | null
    origin?: StringFilter<"Character"> | string
    tier?: IntFilter<"Character"> | number
    hunt?: IntFilter<"Character"> | number
    study?: IntFilter<"Character"> | number
    survey?: IntFilter<"Character"> | number
    tinker?: IntFilter<"Character"> | number
    finesse?: IntFilter<"Character"> | number
    prowl?: IntFilter<"Character"> | number
    skirmish?: IntFilter<"Character"> | number
    wreck?: IntFilter<"Character"> | number
    bizarre?: IntFilter<"Character"> | number
    command?: IntFilter<"Character"> | number
    consort?: IntFilter<"Character"> | number
    sway?: IntFilter<"Character"> | number
    stress?: IntFilter<"Character"> | number
    maxStress?: IntFilter<"Character"> | number
    trauma?: IntFilter<"Character"> | number
    traumaConditions?: StringNullableListFilter<"Character">
    vice?: StringFilter<"Character"> | string
    vicePurveyor?: StringFilter<"Character"> | string
    friends?: StringNullableListFilter<"Character">
    rivals?: StringNullableListFilter<"Character">
    insightXp?: IntFilter<"Character"> | number
    prowessXp?: IntFilter<"Character"> | number
    resolveXp?: IntFilter<"Character"> | number
    playbackXp?: IntFilter<"Character"> | number
    harm?: JsonFilter<"Character">
    specialArmor?: IntFilter<"Character"> | number
    items?: StringNullableListFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    campaign?: XOR<CampaignNullableRelationFilter, CampaignWhereInput> | null
    stand?: XOR<StandNullableRelationFilter, StandWhereInput> | null
    rolls?: RollListRelationFilter
  }, "id">

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrderInput | SortOrder
    origin?: SortOrder
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    traumaConditions?: SortOrder
    vice?: SortOrder
    vicePurveyor?: SortOrder
    friends?: SortOrder
    rivals?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    harm?: SortOrder
    specialArmor?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    OR?: CharacterScalarWhereWithAggregatesInput[]
    NOT?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Character"> | string
    name?: StringWithAggregatesFilter<"Character"> | string
    userId?: StringWithAggregatesFilter<"Character"> | string
    campaignId?: StringNullableWithAggregatesFilter<"Character"> | string | null
    origin?: StringWithAggregatesFilter<"Character"> | string
    tier?: IntWithAggregatesFilter<"Character"> | number
    hunt?: IntWithAggregatesFilter<"Character"> | number
    study?: IntWithAggregatesFilter<"Character"> | number
    survey?: IntWithAggregatesFilter<"Character"> | number
    tinker?: IntWithAggregatesFilter<"Character"> | number
    finesse?: IntWithAggregatesFilter<"Character"> | number
    prowl?: IntWithAggregatesFilter<"Character"> | number
    skirmish?: IntWithAggregatesFilter<"Character"> | number
    wreck?: IntWithAggregatesFilter<"Character"> | number
    bizarre?: IntWithAggregatesFilter<"Character"> | number
    command?: IntWithAggregatesFilter<"Character"> | number
    consort?: IntWithAggregatesFilter<"Character"> | number
    sway?: IntWithAggregatesFilter<"Character"> | number
    stress?: IntWithAggregatesFilter<"Character"> | number
    maxStress?: IntWithAggregatesFilter<"Character"> | number
    trauma?: IntWithAggregatesFilter<"Character"> | number
    traumaConditions?: StringNullableListFilter<"Character">
    vice?: StringWithAggregatesFilter<"Character"> | string
    vicePurveyor?: StringWithAggregatesFilter<"Character"> | string
    friends?: StringNullableListFilter<"Character">
    rivals?: StringNullableListFilter<"Character">
    insightXp?: IntWithAggregatesFilter<"Character"> | number
    prowessXp?: IntWithAggregatesFilter<"Character"> | number
    resolveXp?: IntWithAggregatesFilter<"Character"> | number
    playbackXp?: IntWithAggregatesFilter<"Character"> | number
    harm?: JsonWithAggregatesFilter<"Character">
    specialArmor?: IntWithAggregatesFilter<"Character"> | number
    items?: StringNullableListFilter<"Character">
    createdAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
  }

  export type StandWhereInput = {
    AND?: StandWhereInput | StandWhereInput[]
    OR?: StandWhereInput[]
    NOT?: StandWhereInput | StandWhereInput[]
    id?: StringFilter<"Stand"> | string
    name?: StringFilter<"Stand"> | string
    characterId?: StringFilter<"Stand"> | string
    type?: StringFilter<"Stand"> | string
    form?: StringFilter<"Stand"> | string
    consciousness?: StringFilter<"Stand"> | string
    power?: StringFilter<"Stand"> | string
    speed?: StringFilter<"Stand"> | string
    range?: StringFilter<"Stand"> | string
    durability?: StringFilter<"Stand"> | string
    precision?: StringFilter<"Stand"> | string
    potential?: StringFilter<"Stand"> | string
    appearance?: StringFilter<"Stand"> | string
    manifestation?: StringNullableFilter<"Stand"> | string | null
    specialTraits?: StringNullableFilter<"Stand"> | string | null
    createdAt?: DateTimeFilter<"Stand"> | Date | string
    updatedAt?: DateTimeFilter<"Stand"> | Date | string
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    abilities?: StandAbilityListRelationFilter
  }

  export type StandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    characterId?: SortOrder
    type?: SortOrder
    form?: SortOrder
    consciousness?: SortOrder
    power?: SortOrder
    speed?: SortOrder
    range?: SortOrder
    durability?: SortOrder
    precision?: SortOrder
    potential?: SortOrder
    appearance?: SortOrder
    manifestation?: SortOrderInput | SortOrder
    specialTraits?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
    abilities?: StandAbilityOrderByRelationAggregateInput
  }

  export type StandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    characterId?: string
    AND?: StandWhereInput | StandWhereInput[]
    OR?: StandWhereInput[]
    NOT?: StandWhereInput | StandWhereInput[]
    name?: StringFilter<"Stand"> | string
    type?: StringFilter<"Stand"> | string
    form?: StringFilter<"Stand"> | string
    consciousness?: StringFilter<"Stand"> | string
    power?: StringFilter<"Stand"> | string
    speed?: StringFilter<"Stand"> | string
    range?: StringFilter<"Stand"> | string
    durability?: StringFilter<"Stand"> | string
    precision?: StringFilter<"Stand"> | string
    potential?: StringFilter<"Stand"> | string
    appearance?: StringFilter<"Stand"> | string
    manifestation?: StringNullableFilter<"Stand"> | string | null
    specialTraits?: StringNullableFilter<"Stand"> | string | null
    createdAt?: DateTimeFilter<"Stand"> | Date | string
    updatedAt?: DateTimeFilter<"Stand"> | Date | string
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    abilities?: StandAbilityListRelationFilter
  }, "id" | "characterId">

  export type StandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    characterId?: SortOrder
    type?: SortOrder
    form?: SortOrder
    consciousness?: SortOrder
    power?: SortOrder
    speed?: SortOrder
    range?: SortOrder
    durability?: SortOrder
    precision?: SortOrder
    potential?: SortOrder
    appearance?: SortOrder
    manifestation?: SortOrderInput | SortOrder
    specialTraits?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StandCountOrderByAggregateInput
    _max?: StandMaxOrderByAggregateInput
    _min?: StandMinOrderByAggregateInput
  }

  export type StandScalarWhereWithAggregatesInput = {
    AND?: StandScalarWhereWithAggregatesInput | StandScalarWhereWithAggregatesInput[]
    OR?: StandScalarWhereWithAggregatesInput[]
    NOT?: StandScalarWhereWithAggregatesInput | StandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stand"> | string
    name?: StringWithAggregatesFilter<"Stand"> | string
    characterId?: StringWithAggregatesFilter<"Stand"> | string
    type?: StringWithAggregatesFilter<"Stand"> | string
    form?: StringWithAggregatesFilter<"Stand"> | string
    consciousness?: StringWithAggregatesFilter<"Stand"> | string
    power?: StringWithAggregatesFilter<"Stand"> | string
    speed?: StringWithAggregatesFilter<"Stand"> | string
    range?: StringWithAggregatesFilter<"Stand"> | string
    durability?: StringWithAggregatesFilter<"Stand"> | string
    precision?: StringWithAggregatesFilter<"Stand"> | string
    potential?: StringWithAggregatesFilter<"Stand"> | string
    appearance?: StringWithAggregatesFilter<"Stand"> | string
    manifestation?: StringNullableWithAggregatesFilter<"Stand"> | string | null
    specialTraits?: StringNullableWithAggregatesFilter<"Stand"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Stand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stand"> | Date | string
  }

  export type StandAbilityWhereInput = {
    AND?: StandAbilityWhereInput | StandAbilityWhereInput[]
    OR?: StandAbilityWhereInput[]
    NOT?: StandAbilityWhereInput | StandAbilityWhereInput[]
    id?: StringFilter<"StandAbility"> | string
    name?: StringFilter<"StandAbility"> | string
    standId?: StringFilter<"StandAbility"> | string
    isUnique?: BoolFilter<"StandAbility"> | boolean
    offenseUse?: StringNullableFilter<"StandAbility"> | string | null
    defenseUse?: StringNullableFilter<"StandAbility"> | string | null
    utilityUse?: StringNullableFilter<"StandAbility"> | string | null
    description?: StringNullableFilter<"StandAbility"> | string | null
    createdAt?: DateTimeFilter<"StandAbility"> | Date | string
    updatedAt?: DateTimeFilter<"StandAbility"> | Date | string
    stand?: XOR<StandRelationFilter, StandWhereInput>
  }

  export type StandAbilityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    standId?: SortOrder
    isUnique?: SortOrder
    offenseUse?: SortOrderInput | SortOrder
    defenseUse?: SortOrderInput | SortOrder
    utilityUse?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stand?: StandOrderByWithRelationInput
  }

  export type StandAbilityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StandAbilityWhereInput | StandAbilityWhereInput[]
    OR?: StandAbilityWhereInput[]
    NOT?: StandAbilityWhereInput | StandAbilityWhereInput[]
    name?: StringFilter<"StandAbility"> | string
    standId?: StringFilter<"StandAbility"> | string
    isUnique?: BoolFilter<"StandAbility"> | boolean
    offenseUse?: StringNullableFilter<"StandAbility"> | string | null
    defenseUse?: StringNullableFilter<"StandAbility"> | string | null
    utilityUse?: StringNullableFilter<"StandAbility"> | string | null
    description?: StringNullableFilter<"StandAbility"> | string | null
    createdAt?: DateTimeFilter<"StandAbility"> | Date | string
    updatedAt?: DateTimeFilter<"StandAbility"> | Date | string
    stand?: XOR<StandRelationFilter, StandWhereInput>
  }, "id">

  export type StandAbilityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    standId?: SortOrder
    isUnique?: SortOrder
    offenseUse?: SortOrderInput | SortOrder
    defenseUse?: SortOrderInput | SortOrder
    utilityUse?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StandAbilityCountOrderByAggregateInput
    _max?: StandAbilityMaxOrderByAggregateInput
    _min?: StandAbilityMinOrderByAggregateInput
  }

  export type StandAbilityScalarWhereWithAggregatesInput = {
    AND?: StandAbilityScalarWhereWithAggregatesInput | StandAbilityScalarWhereWithAggregatesInput[]
    OR?: StandAbilityScalarWhereWithAggregatesInput[]
    NOT?: StandAbilityScalarWhereWithAggregatesInput | StandAbilityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StandAbility"> | string
    name?: StringWithAggregatesFilter<"StandAbility"> | string
    standId?: StringWithAggregatesFilter<"StandAbility"> | string
    isUnique?: BoolWithAggregatesFilter<"StandAbility"> | boolean
    offenseUse?: StringNullableWithAggregatesFilter<"StandAbility"> | string | null
    defenseUse?: StringNullableWithAggregatesFilter<"StandAbility"> | string | null
    utilityUse?: StringNullableWithAggregatesFilter<"StandAbility"> | string | null
    description?: StringNullableWithAggregatesFilter<"StandAbility"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StandAbility"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StandAbility"> | Date | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    dmId?: StringFilter<"Campaign"> | string
    tier?: IntFilter<"Campaign"> | number
    status?: StringFilter<"Campaign"> | string
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    dm?: XOR<UserRelationFilter, UserWhereInput>
    players?: UserListRelationFilter
    characters?: CharacterListRelationFilter
    clocks?: ClockListRelationFilter
    rolls?: RollListRelationFilter
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    dmId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dm?: UserOrderByWithRelationInput
    players?: UserOrderByRelationAggregateInput
    characters?: CharacterOrderByRelationAggregateInput
    clocks?: ClockOrderByRelationAggregateInput
    rolls?: RollOrderByRelationAggregateInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    dmId?: StringFilter<"Campaign"> | string
    tier?: IntFilter<"Campaign"> | number
    status?: StringFilter<"Campaign"> | string
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    dm?: XOR<UserRelationFilter, UserWhereInput>
    players?: UserListRelationFilter
    characters?: CharacterListRelationFilter
    clocks?: ClockListRelationFilter
    rolls?: RollListRelationFilter
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    dmId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Campaign"> | string
    name?: StringWithAggregatesFilter<"Campaign"> | string
    description?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    dmId?: StringWithAggregatesFilter<"Campaign"> | string
    tier?: IntWithAggregatesFilter<"Campaign"> | number
    status?: StringWithAggregatesFilter<"Campaign"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type ClockWhereInput = {
    AND?: ClockWhereInput | ClockWhereInput[]
    OR?: ClockWhereInput[]
    NOT?: ClockWhereInput | ClockWhereInput[]
    id?: StringFilter<"Clock"> | string
    name?: StringFilter<"Clock"> | string
    segments?: IntFilter<"Clock"> | number
    filled?: IntFilter<"Clock"> | number
    campaignId?: StringFilter<"Clock"> | string
    type?: StringFilter<"Clock"> | string
    createdAt?: DateTimeFilter<"Clock"> | Date | string
    updatedAt?: DateTimeFilter<"Clock"> | Date | string
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
  }

  export type ClockOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    segments?: SortOrder
    filled?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
  }

  export type ClockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClockWhereInput | ClockWhereInput[]
    OR?: ClockWhereInput[]
    NOT?: ClockWhereInput | ClockWhereInput[]
    name?: StringFilter<"Clock"> | string
    segments?: IntFilter<"Clock"> | number
    filled?: IntFilter<"Clock"> | number
    campaignId?: StringFilter<"Clock"> | string
    type?: StringFilter<"Clock"> | string
    createdAt?: DateTimeFilter<"Clock"> | Date | string
    updatedAt?: DateTimeFilter<"Clock"> | Date | string
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
  }, "id">

  export type ClockOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    segments?: SortOrder
    filled?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClockCountOrderByAggregateInput
    _avg?: ClockAvgOrderByAggregateInput
    _max?: ClockMaxOrderByAggregateInput
    _min?: ClockMinOrderByAggregateInput
    _sum?: ClockSumOrderByAggregateInput
  }

  export type ClockScalarWhereWithAggregatesInput = {
    AND?: ClockScalarWhereWithAggregatesInput | ClockScalarWhereWithAggregatesInput[]
    OR?: ClockScalarWhereWithAggregatesInput[]
    NOT?: ClockScalarWhereWithAggregatesInput | ClockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Clock"> | string
    name?: StringWithAggregatesFilter<"Clock"> | string
    segments?: IntWithAggregatesFilter<"Clock"> | number
    filled?: IntWithAggregatesFilter<"Clock"> | number
    campaignId?: StringWithAggregatesFilter<"Clock"> | string
    type?: StringWithAggregatesFilter<"Clock"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Clock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Clock"> | Date | string
  }

  export type RollWhereInput = {
    AND?: RollWhereInput | RollWhereInput[]
    OR?: RollWhereInput[]
    NOT?: RollWhereInput | RollWhereInput[]
    id?: StringFilter<"Roll"> | string
    characterId?: StringFilter<"Roll"> | string
    campaignId?: StringFilter<"Roll"> | string
    rollType?: StringFilter<"Roll"> | string
    actionType?: StringNullableFilter<"Roll"> | string | null
    position?: StringFilter<"Roll"> | string
    effect?: StringFilter<"Roll"> | string
    dice?: IntFilter<"Roll"> | number
    results?: IntNullableListFilter<"Roll">
    outcome?: StringFilter<"Roll"> | string
    createdAt?: DateTimeFilter<"Roll"> | Date | string
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
  }

  export type RollOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    campaignId?: SortOrder
    rollType?: SortOrder
    actionType?: SortOrderInput | SortOrder
    position?: SortOrder
    effect?: SortOrder
    dice?: SortOrder
    results?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
    character?: CharacterOrderByWithRelationInput
    campaign?: CampaignOrderByWithRelationInput
  }

  export type RollWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RollWhereInput | RollWhereInput[]
    OR?: RollWhereInput[]
    NOT?: RollWhereInput | RollWhereInput[]
    characterId?: StringFilter<"Roll"> | string
    campaignId?: StringFilter<"Roll"> | string
    rollType?: StringFilter<"Roll"> | string
    actionType?: StringNullableFilter<"Roll"> | string | null
    position?: StringFilter<"Roll"> | string
    effect?: StringFilter<"Roll"> | string
    dice?: IntFilter<"Roll"> | number
    results?: IntNullableListFilter<"Roll">
    outcome?: StringFilter<"Roll"> | string
    createdAt?: DateTimeFilter<"Roll"> | Date | string
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
  }, "id">

  export type RollOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    campaignId?: SortOrder
    rollType?: SortOrder
    actionType?: SortOrderInput | SortOrder
    position?: SortOrder
    effect?: SortOrder
    dice?: SortOrder
    results?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
    _count?: RollCountOrderByAggregateInput
    _avg?: RollAvgOrderByAggregateInput
    _max?: RollMaxOrderByAggregateInput
    _min?: RollMinOrderByAggregateInput
    _sum?: RollSumOrderByAggregateInput
  }

  export type RollScalarWhereWithAggregatesInput = {
    AND?: RollScalarWhereWithAggregatesInput | RollScalarWhereWithAggregatesInput[]
    OR?: RollScalarWhereWithAggregatesInput[]
    NOT?: RollScalarWhereWithAggregatesInput | RollScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Roll"> | string
    characterId?: StringWithAggregatesFilter<"Roll"> | string
    campaignId?: StringWithAggregatesFilter<"Roll"> | string
    rollType?: StringWithAggregatesFilter<"Roll"> | string
    actionType?: StringNullableWithAggregatesFilter<"Roll"> | string | null
    position?: StringWithAggregatesFilter<"Roll"> | string
    effect?: StringWithAggregatesFilter<"Roll"> | string
    dice?: IntWithAggregatesFilter<"Roll"> | number
    results?: IntNullableListFilter<"Roll">
    outcome?: StringWithAggregatesFilter<"Roll"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Roll"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutPlayersInput
    dmCampaigns?: CampaignCreateNestedManyWithoutDmInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutPlayersInput
    dmCampaigns?: CampaignUncheckedCreateNestedManyWithoutDmInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutPlayersNestedInput
    dmCampaigns?: CampaignUpdateManyWithoutDmNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutPlayersNestedInput
    dmCampaigns?: CampaignUncheckedUpdateManyWithoutDmNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateInput = {
    id?: string
    name: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign?: CampaignCreateNestedOneWithoutCharactersInput
    stand?: StandCreateNestedOneWithoutCharacterInput
    rolls?: RollCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    stand?: StandUncheckedCreateNestedOneWithoutCharacterInput
    rolls?: RollUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneWithoutCharactersNestedInput
    stand?: StandUpdateOneWithoutCharacterNestedInput
    rolls?: RollUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stand?: StandUncheckedUpdateOneWithoutCharacterNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterCreateManyInput = {
    id?: string
    name: string
    userId: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandCreateInput = {
    id?: string
    name: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutStandInput
    abilities?: StandAbilityCreateNestedManyWithoutStandInput
  }

  export type StandUncheckedCreateInput = {
    id?: string
    name: string
    characterId: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    abilities?: StandAbilityUncheckedCreateNestedManyWithoutStandInput
  }

  export type StandUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutStandNestedInput
    abilities?: StandAbilityUpdateManyWithoutStandNestedInput
  }

  export type StandUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    abilities?: StandAbilityUncheckedUpdateManyWithoutStandNestedInput
  }

  export type StandCreateManyInput = {
    id?: string
    name: string
    characterId: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityCreateInput = {
    id?: string
    name: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stand: StandCreateNestedOneWithoutAbilitiesInput
  }

  export type StandAbilityUncheckedCreateInput = {
    id?: string
    name: string
    standId: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandAbilityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stand?: StandUpdateOneRequiredWithoutAbilitiesNestedInput
  }

  export type StandAbilityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    standId?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityCreateManyInput = {
    id?: string
    name: string
    standId: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandAbilityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    standId?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dm: UserCreateNestedOneWithoutDmCampaignsInput
    players?: UserCreateNestedManyWithoutCampaignsInput
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    clocks?: ClockCreateNestedManyWithoutCampaignInput
    rolls?: RollCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    clocks?: ClockUncheckedCreateNestedManyWithoutCampaignInput
    rolls?: RollUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dm?: UserUpdateOneRequiredWithoutDmCampaignsNestedInput
    players?: UserUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUpdateManyWithoutCampaignNestedInput
    rolls?: RollUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUncheckedUpdateManyWithoutCampaignNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockCreateInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutClocksInput
  }

  export type ClockUncheckedCreateInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    campaignId: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutClocksNestedInput
  }

  export type ClockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    campaignId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockCreateManyInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    campaignId: string
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    campaignId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCreateInput = {
    id?: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
    character: CharacterCreateNestedOneWithoutRollsInput
    campaign: CampaignCreateNestedOneWithoutRollsInput
  }

  export type RollUncheckedCreateInput = {
    id?: string
    characterId: string
    campaignId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type RollUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutRollsNestedInput
    campaign?: CampaignUpdateOneRequiredWithoutRollsNestedInput
  }

  export type RollUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCreateManyInput = {
    id?: string
    characterId: string
    campaignId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type RollUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CharacterListRelationFilter = {
    every?: CharacterWhereInput
    some?: CharacterWhereInput
    none?: CharacterWhereInput
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    googleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CampaignNullableRelationFilter = {
    is?: CampaignWhereInput | null
    isNot?: CampaignWhereInput | null
  }

  export type StandNullableRelationFilter = {
    is?: StandWhereInput | null
    isNot?: StandWhereInput | null
  }

  export type RollListRelationFilter = {
    every?: RollWhereInput
    some?: RollWhereInput
    none?: RollWhereInput
  }

  export type RollOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    origin?: SortOrder
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    traumaConditions?: SortOrder
    vice?: SortOrder
    vicePurveyor?: SortOrder
    friends?: SortOrder
    rivals?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    harm?: SortOrder
    specialArmor?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    specialArmor?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    origin?: SortOrder
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    vice?: SortOrder
    vicePurveyor?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    specialArmor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    campaignId?: SortOrder
    origin?: SortOrder
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    vice?: SortOrder
    vicePurveyor?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    specialArmor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    tier?: SortOrder
    hunt?: SortOrder
    study?: SortOrder
    survey?: SortOrder
    tinker?: SortOrder
    finesse?: SortOrder
    prowl?: SortOrder
    skirmish?: SortOrder
    wreck?: SortOrder
    bizarre?: SortOrder
    command?: SortOrder
    consort?: SortOrder
    sway?: SortOrder
    stress?: SortOrder
    maxStress?: SortOrder
    trauma?: SortOrder
    insightXp?: SortOrder
    prowessXp?: SortOrder
    resolveXp?: SortOrder
    playbackXp?: SortOrder
    specialArmor?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CharacterRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type StandAbilityListRelationFilter = {
    every?: StandAbilityWhereInput
    some?: StandAbilityWhereInput
    none?: StandAbilityWhereInput
  }

  export type StandAbilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    characterId?: SortOrder
    type?: SortOrder
    form?: SortOrder
    consciousness?: SortOrder
    power?: SortOrder
    speed?: SortOrder
    range?: SortOrder
    durability?: SortOrder
    precision?: SortOrder
    potential?: SortOrder
    appearance?: SortOrder
    manifestation?: SortOrder
    specialTraits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    characterId?: SortOrder
    type?: SortOrder
    form?: SortOrder
    consciousness?: SortOrder
    power?: SortOrder
    speed?: SortOrder
    range?: SortOrder
    durability?: SortOrder
    precision?: SortOrder
    potential?: SortOrder
    appearance?: SortOrder
    manifestation?: SortOrder
    specialTraits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    characterId?: SortOrder
    type?: SortOrder
    form?: SortOrder
    consciousness?: SortOrder
    power?: SortOrder
    speed?: SortOrder
    range?: SortOrder
    durability?: SortOrder
    precision?: SortOrder
    potential?: SortOrder
    appearance?: SortOrder
    manifestation?: SortOrder
    specialTraits?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StandRelationFilter = {
    is?: StandWhereInput
    isNot?: StandWhereInput
  }

  export type StandAbilityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    standId?: SortOrder
    isUnique?: SortOrder
    offenseUse?: SortOrder
    defenseUse?: SortOrder
    utilityUse?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StandAbilityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    standId?: SortOrder
    isUnique?: SortOrder
    offenseUse?: SortOrder
    defenseUse?: SortOrder
    utilityUse?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StandAbilityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    standId?: SortOrder
    isUnique?: SortOrder
    offenseUse?: SortOrder
    defenseUse?: SortOrder
    utilityUse?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ClockListRelationFilter = {
    every?: ClockWhereInput
    some?: ClockWhereInput
    none?: ClockWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dmId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    tier?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dmId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dmId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    tier?: SortOrder
  }

  export type CampaignRelationFilter = {
    is?: CampaignWhereInput
    isNot?: CampaignWhereInput
  }

  export type ClockCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    segments?: SortOrder
    filled?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClockAvgOrderByAggregateInput = {
    segments?: SortOrder
    filled?: SortOrder
  }

  export type ClockMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    segments?: SortOrder
    filled?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClockMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    segments?: SortOrder
    filled?: SortOrder
    campaignId?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClockSumOrderByAggregateInput = {
    segments?: SortOrder
    filled?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type RollCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    campaignId?: SortOrder
    rollType?: SortOrder
    actionType?: SortOrder
    position?: SortOrder
    effect?: SortOrder
    dice?: SortOrder
    results?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
  }

  export type RollAvgOrderByAggregateInput = {
    dice?: SortOrder
    results?: SortOrder
  }

  export type RollMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    campaignId?: SortOrder
    rollType?: SortOrder
    actionType?: SortOrder
    position?: SortOrder
    effect?: SortOrder
    dice?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
  }

  export type RollMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    campaignId?: SortOrder
    rollType?: SortOrder
    actionType?: SortOrder
    position?: SortOrder
    effect?: SortOrder
    dice?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
  }

  export type RollSumOrderByAggregateInput = {
    dice?: SortOrder
    results?: SortOrder
  }

  export type CharacterCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput> | CampaignCreateWithoutPlayersInput[] | CampaignUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutPlayersInput | CampaignCreateOrConnectWithoutPlayersInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutDmInput = {
    create?: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput> | CampaignCreateWithoutDmInput[] | CampaignUncheckedCreateWithoutDmInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutDmInput | CampaignCreateOrConnectWithoutDmInput[]
    createMany?: CampaignCreateManyDmInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput> | CampaignCreateWithoutPlayersInput[] | CampaignUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutPlayersInput | CampaignCreateOrConnectWithoutPlayersInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutDmInput = {
    create?: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput> | CampaignCreateWithoutDmInput[] | CampaignUncheckedCreateWithoutDmInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutDmInput | CampaignCreateOrConnectWithoutDmInput[]
    createMany?: CampaignCreateManyDmInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CharacterUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutUserInput | CharacterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutUserInput | CharacterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutUserInput | CharacterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput> | CampaignCreateWithoutPlayersInput[] | CampaignUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutPlayersInput | CampaignCreateOrConnectWithoutPlayersInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutPlayersInput | CampaignUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutPlayersInput | CampaignUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutPlayersInput | CampaignUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutDmNestedInput = {
    create?: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput> | CampaignCreateWithoutDmInput[] | CampaignUncheckedCreateWithoutDmInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutDmInput | CampaignCreateOrConnectWithoutDmInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutDmInput | CampaignUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: CampaignCreateManyDmInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutDmInput | CampaignUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutDmInput | CampaignUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput> | CharacterCreateWithoutUserInput[] | CharacterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput | CharacterCreateOrConnectWithoutUserInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutUserInput | CharacterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CharacterCreateManyUserInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutUserInput | CharacterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutUserInput | CharacterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput> | CampaignCreateWithoutPlayersInput[] | CampaignUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutPlayersInput | CampaignCreateOrConnectWithoutPlayersInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutPlayersInput | CampaignUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutPlayersInput | CampaignUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutPlayersInput | CampaignUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutDmNestedInput = {
    create?: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput> | CampaignCreateWithoutDmInput[] | CampaignUncheckedCreateWithoutDmInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutDmInput | CampaignCreateOrConnectWithoutDmInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutDmInput | CampaignUpsertWithWhereUniqueWithoutDmInput[]
    createMany?: CampaignCreateManyDmInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutDmInput | CampaignUpdateWithWhereUniqueWithoutDmInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutDmInput | CampaignUpdateManyWithWhereWithoutDmInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type CharacterCreatetraumaConditionsInput = {
    set: string[]
  }

  export type CharacterCreatefriendsInput = {
    set: string[]
  }

  export type CharacterCreaterivalsInput = {
    set: string[]
  }

  export type CharacterCreateitemsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCharactersInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    connect?: UserWhereUniqueInput
  }

  export type CampaignCreateNestedOneWithoutCharactersInput = {
    create?: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCharactersInput
    connect?: CampaignWhereUniqueInput
  }

  export type StandCreateNestedOneWithoutCharacterInput = {
    create?: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StandCreateOrConnectWithoutCharacterInput
    connect?: StandWhereUniqueInput
  }

  export type RollCreateNestedManyWithoutCharacterInput = {
    create?: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput> | RollCreateWithoutCharacterInput[] | RollUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCharacterInput | RollCreateOrConnectWithoutCharacterInput[]
    createMany?: RollCreateManyCharacterInputEnvelope
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
  }

  export type StandUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StandCreateOrConnectWithoutCharacterInput
    connect?: StandWhereUniqueInput
  }

  export type RollUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput> | RollCreateWithoutCharacterInput[] | RollUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCharacterInput | RollCreateOrConnectWithoutCharacterInput[]
    createMany?: RollCreateManyCharacterInputEnvelope
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CharacterUpdatetraumaConditionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CharacterUpdatefriendsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CharacterUpdaterivalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CharacterUpdateitemsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCharactersNestedInput = {
    create?: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharactersInput
    upsert?: UserUpsertWithoutCharactersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCharactersInput, UserUpdateWithoutCharactersInput>, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type CampaignUpdateOneWithoutCharactersNestedInput = {
    create?: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutCharactersInput
    upsert?: CampaignUpsertWithoutCharactersInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutCharactersInput, CampaignUpdateWithoutCharactersInput>, CampaignUncheckedUpdateWithoutCharactersInput>
  }

  export type StandUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StandCreateOrConnectWithoutCharacterInput
    upsert?: StandUpsertWithoutCharacterInput
    disconnect?: StandWhereInput | boolean
    delete?: StandWhereInput | boolean
    connect?: StandWhereUniqueInput
    update?: XOR<XOR<StandUpdateToOneWithWhereWithoutCharacterInput, StandUpdateWithoutCharacterInput>, StandUncheckedUpdateWithoutCharacterInput>
  }

  export type RollUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput> | RollCreateWithoutCharacterInput[] | RollUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCharacterInput | RollCreateOrConnectWithoutCharacterInput[]
    upsert?: RollUpsertWithWhereUniqueWithoutCharacterInput | RollUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: RollCreateManyCharacterInputEnvelope
    set?: RollWhereUniqueInput | RollWhereUniqueInput[]
    disconnect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    delete?: RollWhereUniqueInput | RollWhereUniqueInput[]
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    update?: RollUpdateWithWhereUniqueWithoutCharacterInput | RollUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: RollUpdateManyWithWhereWithoutCharacterInput | RollUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: RollScalarWhereInput | RollScalarWhereInput[]
  }

  export type StandUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StandCreateOrConnectWithoutCharacterInput
    upsert?: StandUpsertWithoutCharacterInput
    disconnect?: StandWhereInput | boolean
    delete?: StandWhereInput | boolean
    connect?: StandWhereUniqueInput
    update?: XOR<XOR<StandUpdateToOneWithWhereWithoutCharacterInput, StandUpdateWithoutCharacterInput>, StandUncheckedUpdateWithoutCharacterInput>
  }

  export type RollUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput> | RollCreateWithoutCharacterInput[] | RollUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCharacterInput | RollCreateOrConnectWithoutCharacterInput[]
    upsert?: RollUpsertWithWhereUniqueWithoutCharacterInput | RollUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: RollCreateManyCharacterInputEnvelope
    set?: RollWhereUniqueInput | RollWhereUniqueInput[]
    disconnect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    delete?: RollWhereUniqueInput | RollWhereUniqueInput[]
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    update?: RollUpdateWithWhereUniqueWithoutCharacterInput | RollUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: RollUpdateManyWithWhereWithoutCharacterInput | RollUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: RollScalarWhereInput | RollScalarWhereInput[]
  }

  export type CharacterCreateNestedOneWithoutStandInput = {
    create?: XOR<CharacterCreateWithoutStandInput, CharacterUncheckedCreateWithoutStandInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutStandInput
    connect?: CharacterWhereUniqueInput
  }

  export type StandAbilityCreateNestedManyWithoutStandInput = {
    create?: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput> | StandAbilityCreateWithoutStandInput[] | StandAbilityUncheckedCreateWithoutStandInput[]
    connectOrCreate?: StandAbilityCreateOrConnectWithoutStandInput | StandAbilityCreateOrConnectWithoutStandInput[]
    createMany?: StandAbilityCreateManyStandInputEnvelope
    connect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
  }

  export type StandAbilityUncheckedCreateNestedManyWithoutStandInput = {
    create?: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput> | StandAbilityCreateWithoutStandInput[] | StandAbilityUncheckedCreateWithoutStandInput[]
    connectOrCreate?: StandAbilityCreateOrConnectWithoutStandInput | StandAbilityCreateOrConnectWithoutStandInput[]
    createMany?: StandAbilityCreateManyStandInputEnvelope
    connect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
  }

  export type CharacterUpdateOneRequiredWithoutStandNestedInput = {
    create?: XOR<CharacterCreateWithoutStandInput, CharacterUncheckedCreateWithoutStandInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutStandInput
    upsert?: CharacterUpsertWithoutStandInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutStandInput, CharacterUpdateWithoutStandInput>, CharacterUncheckedUpdateWithoutStandInput>
  }

  export type StandAbilityUpdateManyWithoutStandNestedInput = {
    create?: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput> | StandAbilityCreateWithoutStandInput[] | StandAbilityUncheckedCreateWithoutStandInput[]
    connectOrCreate?: StandAbilityCreateOrConnectWithoutStandInput | StandAbilityCreateOrConnectWithoutStandInput[]
    upsert?: StandAbilityUpsertWithWhereUniqueWithoutStandInput | StandAbilityUpsertWithWhereUniqueWithoutStandInput[]
    createMany?: StandAbilityCreateManyStandInputEnvelope
    set?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    disconnect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    delete?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    connect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    update?: StandAbilityUpdateWithWhereUniqueWithoutStandInput | StandAbilityUpdateWithWhereUniqueWithoutStandInput[]
    updateMany?: StandAbilityUpdateManyWithWhereWithoutStandInput | StandAbilityUpdateManyWithWhereWithoutStandInput[]
    deleteMany?: StandAbilityScalarWhereInput | StandAbilityScalarWhereInput[]
  }

  export type StandAbilityUncheckedUpdateManyWithoutStandNestedInput = {
    create?: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput> | StandAbilityCreateWithoutStandInput[] | StandAbilityUncheckedCreateWithoutStandInput[]
    connectOrCreate?: StandAbilityCreateOrConnectWithoutStandInput | StandAbilityCreateOrConnectWithoutStandInput[]
    upsert?: StandAbilityUpsertWithWhereUniqueWithoutStandInput | StandAbilityUpsertWithWhereUniqueWithoutStandInput[]
    createMany?: StandAbilityCreateManyStandInputEnvelope
    set?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    disconnect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    delete?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    connect?: StandAbilityWhereUniqueInput | StandAbilityWhereUniqueInput[]
    update?: StandAbilityUpdateWithWhereUniqueWithoutStandInput | StandAbilityUpdateWithWhereUniqueWithoutStandInput[]
    updateMany?: StandAbilityUpdateManyWithWhereWithoutStandInput | StandAbilityUpdateManyWithWhereWithoutStandInput[]
    deleteMany?: StandAbilityScalarWhereInput | StandAbilityScalarWhereInput[]
  }

  export type StandCreateNestedOneWithoutAbilitiesInput = {
    create?: XOR<StandCreateWithoutAbilitiesInput, StandUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: StandCreateOrConnectWithoutAbilitiesInput
    connect?: StandWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StandUpdateOneRequiredWithoutAbilitiesNestedInput = {
    create?: XOR<StandCreateWithoutAbilitiesInput, StandUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: StandCreateOrConnectWithoutAbilitiesInput
    upsert?: StandUpsertWithoutAbilitiesInput
    connect?: StandWhereUniqueInput
    update?: XOR<XOR<StandUpdateToOneWithWhereWithoutAbilitiesInput, StandUpdateWithoutAbilitiesInput>, StandUncheckedUpdateWithoutAbilitiesInput>
  }

  export type UserCreateNestedOneWithoutDmCampaignsInput = {
    create?: XOR<UserCreateWithoutDmCampaignsInput, UserUncheckedCreateWithoutDmCampaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmCampaignsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCampaignsInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CharacterCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type ClockCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput> | ClockCreateWithoutCampaignInput[] | ClockUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ClockCreateOrConnectWithoutCampaignInput | ClockCreateOrConnectWithoutCampaignInput[]
    createMany?: ClockCreateManyCampaignInputEnvelope
    connect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
  }

  export type RollCreateNestedManyWithoutCampaignInput = {
    create?: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput> | RollCreateWithoutCampaignInput[] | RollUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCampaignInput | RollCreateOrConnectWithoutCampaignInput[]
    createMany?: RollCreateManyCampaignInputEnvelope
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCampaignsInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type ClockUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput> | ClockCreateWithoutCampaignInput[] | ClockUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ClockCreateOrConnectWithoutCampaignInput | ClockCreateOrConnectWithoutCampaignInput[]
    createMany?: ClockCreateManyCampaignInputEnvelope
    connect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
  }

  export type RollUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput> | RollCreateWithoutCampaignInput[] | RollUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCampaignInput | RollCreateOrConnectWithoutCampaignInput[]
    createMany?: RollCreateManyCampaignInputEnvelope
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDmCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutDmCampaignsInput, UserUncheckedCreateWithoutDmCampaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmCampaignsInput
    upsert?: UserUpsertWithoutDmCampaignsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDmCampaignsInput, UserUpdateWithoutDmCampaignsInput>, UserUncheckedUpdateWithoutDmCampaignsInput>
  }

  export type UserUpdateManyWithoutCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCampaignsInput | UserUpsertWithWhereUniqueWithoutCampaignsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCampaignsInput | UserUpdateWithWhereUniqueWithoutCampaignsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCampaignsInput | UserUpdateManyWithWhereWithoutCampaignsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CharacterUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCampaignInput | CharacterUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCampaignInput | CharacterUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCampaignInput | CharacterUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type ClockUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput> | ClockCreateWithoutCampaignInput[] | ClockUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ClockCreateOrConnectWithoutCampaignInput | ClockCreateOrConnectWithoutCampaignInput[]
    upsert?: ClockUpsertWithWhereUniqueWithoutCampaignInput | ClockUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ClockCreateManyCampaignInputEnvelope
    set?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    disconnect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    delete?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    connect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    update?: ClockUpdateWithWhereUniqueWithoutCampaignInput | ClockUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ClockUpdateManyWithWhereWithoutCampaignInput | ClockUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ClockScalarWhereInput | ClockScalarWhereInput[]
  }

  export type RollUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput> | RollCreateWithoutCampaignInput[] | RollUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCampaignInput | RollCreateOrConnectWithoutCampaignInput[]
    upsert?: RollUpsertWithWhereUniqueWithoutCampaignInput | RollUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: RollCreateManyCampaignInputEnvelope
    set?: RollWhereUniqueInput | RollWhereUniqueInput[]
    disconnect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    delete?: RollWhereUniqueInput | RollWhereUniqueInput[]
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    update?: RollUpdateWithWhereUniqueWithoutCampaignInput | RollUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: RollUpdateManyWithWhereWithoutCampaignInput | RollUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: RollScalarWhereInput | RollScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput> | UserCreateWithoutCampaignsInput[] | UserUncheckedCreateWithoutCampaignsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCampaignsInput | UserCreateOrConnectWithoutCampaignsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCampaignsInput | UserUpsertWithWhereUniqueWithoutCampaignsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCampaignsInput | UserUpdateWithWhereUniqueWithoutCampaignsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCampaignsInput | UserUpdateManyWithWhereWithoutCampaignsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput> | CharacterCreateWithoutCampaignInput[] | CharacterUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutCampaignInput | CharacterCreateOrConnectWithoutCampaignInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutCampaignInput | CharacterUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: CharacterCreateManyCampaignInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutCampaignInput | CharacterUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutCampaignInput | CharacterUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type ClockUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput> | ClockCreateWithoutCampaignInput[] | ClockUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: ClockCreateOrConnectWithoutCampaignInput | ClockCreateOrConnectWithoutCampaignInput[]
    upsert?: ClockUpsertWithWhereUniqueWithoutCampaignInput | ClockUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: ClockCreateManyCampaignInputEnvelope
    set?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    disconnect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    delete?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    connect?: ClockWhereUniqueInput | ClockWhereUniqueInput[]
    update?: ClockUpdateWithWhereUniqueWithoutCampaignInput | ClockUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: ClockUpdateManyWithWhereWithoutCampaignInput | ClockUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: ClockScalarWhereInput | ClockScalarWhereInput[]
  }

  export type RollUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput> | RollCreateWithoutCampaignInput[] | RollUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: RollCreateOrConnectWithoutCampaignInput | RollCreateOrConnectWithoutCampaignInput[]
    upsert?: RollUpsertWithWhereUniqueWithoutCampaignInput | RollUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: RollCreateManyCampaignInputEnvelope
    set?: RollWhereUniqueInput | RollWhereUniqueInput[]
    disconnect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    delete?: RollWhereUniqueInput | RollWhereUniqueInput[]
    connect?: RollWhereUniqueInput | RollWhereUniqueInput[]
    update?: RollUpdateWithWhereUniqueWithoutCampaignInput | RollUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: RollUpdateManyWithWhereWithoutCampaignInput | RollUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: RollScalarWhereInput | RollScalarWhereInput[]
  }

  export type CampaignCreateNestedOneWithoutClocksInput = {
    create?: XOR<CampaignCreateWithoutClocksInput, CampaignUncheckedCreateWithoutClocksInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutClocksInput
    connect?: CampaignWhereUniqueInput
  }

  export type CampaignUpdateOneRequiredWithoutClocksNestedInput = {
    create?: XOR<CampaignCreateWithoutClocksInput, CampaignUncheckedCreateWithoutClocksInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutClocksInput
    upsert?: CampaignUpsertWithoutClocksInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutClocksInput, CampaignUpdateWithoutClocksInput>, CampaignUncheckedUpdateWithoutClocksInput>
  }

  export type RollCreateresultsInput = {
    set: number[]
  }

  export type CharacterCreateNestedOneWithoutRollsInput = {
    create?: XOR<CharacterCreateWithoutRollsInput, CharacterUncheckedCreateWithoutRollsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutRollsInput
    connect?: CharacterWhereUniqueInput
  }

  export type CampaignCreateNestedOneWithoutRollsInput = {
    create?: XOR<CampaignCreateWithoutRollsInput, CampaignUncheckedCreateWithoutRollsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutRollsInput
    connect?: CampaignWhereUniqueInput
  }

  export type RollUpdateresultsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type CharacterUpdateOneRequiredWithoutRollsNestedInput = {
    create?: XOR<CharacterCreateWithoutRollsInput, CharacterUncheckedCreateWithoutRollsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutRollsInput
    upsert?: CharacterUpsertWithoutRollsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutRollsInput, CharacterUpdateWithoutRollsInput>, CharacterUncheckedUpdateWithoutRollsInput>
  }

  export type CampaignUpdateOneRequiredWithoutRollsNestedInput = {
    create?: XOR<CampaignCreateWithoutRollsInput, CampaignUncheckedCreateWithoutRollsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutRollsInput
    upsert?: CampaignUpsertWithoutRollsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutRollsInput, CampaignUpdateWithoutRollsInput>, CampaignUncheckedUpdateWithoutRollsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CharacterCreateWithoutUserInput = {
    id?: string
    name: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign?: CampaignCreateNestedOneWithoutCharactersInput
    stand?: StandCreateNestedOneWithoutCharacterInput
    rolls?: RollCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    stand?: StandUncheckedCreateNestedOneWithoutCharacterInput
    rolls?: RollUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutUserInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
  }

  export type CharacterCreateManyUserInputEnvelope = {
    data: CharacterCreateManyUserInput | CharacterCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutPlayersInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dm: UserCreateNestedOneWithoutDmCampaignsInput
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    clocks?: ClockCreateNestedManyWithoutCampaignInput
    rolls?: RollCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutPlayersInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    clocks?: ClockUncheckedCreateNestedManyWithoutCampaignInput
    rolls?: RollUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutPlayersInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput>
  }

  export type CampaignCreateWithoutDmInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserCreateNestedManyWithoutCampaignsInput
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    clocks?: ClockCreateNestedManyWithoutCampaignInput
    rolls?: RollCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutDmInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    clocks?: ClockUncheckedCreateNestedManyWithoutCampaignInput
    rolls?: RollUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutDmInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput>
  }

  export type CampaignCreateManyDmInputEnvelope = {
    data: CampaignCreateManyDmInput | CampaignCreateManyDmInput[]
    skipDuplicates?: boolean
  }

  export type CharacterUpsertWithWhereUniqueWithoutUserInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutUserInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
  }

  export type CharacterUpdateManyWithWhereWithoutUserInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutUserInput>
  }

  export type CharacterScalarWhereInput = {
    AND?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    OR?: CharacterScalarWhereInput[]
    NOT?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    id?: StringFilter<"Character"> | string
    name?: StringFilter<"Character"> | string
    userId?: StringFilter<"Character"> | string
    campaignId?: StringNullableFilter<"Character"> | string | null
    origin?: StringFilter<"Character"> | string
    tier?: IntFilter<"Character"> | number
    hunt?: IntFilter<"Character"> | number
    study?: IntFilter<"Character"> | number
    survey?: IntFilter<"Character"> | number
    tinker?: IntFilter<"Character"> | number
    finesse?: IntFilter<"Character"> | number
    prowl?: IntFilter<"Character"> | number
    skirmish?: IntFilter<"Character"> | number
    wreck?: IntFilter<"Character"> | number
    bizarre?: IntFilter<"Character"> | number
    command?: IntFilter<"Character"> | number
    consort?: IntFilter<"Character"> | number
    sway?: IntFilter<"Character"> | number
    stress?: IntFilter<"Character"> | number
    maxStress?: IntFilter<"Character"> | number
    trauma?: IntFilter<"Character"> | number
    traumaConditions?: StringNullableListFilter<"Character">
    vice?: StringFilter<"Character"> | string
    vicePurveyor?: StringFilter<"Character"> | string
    friends?: StringNullableListFilter<"Character">
    rivals?: StringNullableListFilter<"Character">
    insightXp?: IntFilter<"Character"> | number
    prowessXp?: IntFilter<"Character"> | number
    resolveXp?: IntFilter<"Character"> | number
    playbackXp?: IntFilter<"Character"> | number
    harm?: JsonFilter<"Character">
    specialArmor?: IntFilter<"Character"> | number
    items?: StringNullableListFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
  }

  export type CampaignUpsertWithWhereUniqueWithoutPlayersInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutPlayersInput, CampaignUncheckedUpdateWithoutPlayersInput>
    create: XOR<CampaignCreateWithoutPlayersInput, CampaignUncheckedCreateWithoutPlayersInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutPlayersInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutPlayersInput, CampaignUncheckedUpdateWithoutPlayersInput>
  }

  export type CampaignUpdateManyWithWhereWithoutPlayersInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutPlayersInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    dmId?: StringFilter<"Campaign"> | string
    tier?: IntFilter<"Campaign"> | number
    status?: StringFilter<"Campaign"> | string
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
  }

  export type CampaignUpsertWithWhereUniqueWithoutDmInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutDmInput, CampaignUncheckedUpdateWithoutDmInput>
    create: XOR<CampaignCreateWithoutDmInput, CampaignUncheckedCreateWithoutDmInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutDmInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutDmInput, CampaignUncheckedUpdateWithoutDmInput>
  }

  export type CampaignUpdateManyWithWhereWithoutDmInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutDmInput>
  }

  export type UserCreateWithoutCharactersInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaigns?: CampaignCreateNestedManyWithoutPlayersInput
    dmCampaigns?: CampaignCreateNestedManyWithoutDmInput
  }

  export type UserUncheckedCreateWithoutCharactersInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaigns?: CampaignUncheckedCreateNestedManyWithoutPlayersInput
    dmCampaigns?: CampaignUncheckedCreateNestedManyWithoutDmInput
  }

  export type UserCreateOrConnectWithoutCharactersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
  }

  export type CampaignCreateWithoutCharactersInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dm: UserCreateNestedOneWithoutDmCampaignsInput
    players?: UserCreateNestedManyWithoutCampaignsInput
    clocks?: ClockCreateNestedManyWithoutCampaignInput
    rolls?: RollCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutCharactersInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    clocks?: ClockUncheckedCreateNestedManyWithoutCampaignInput
    rolls?: RollUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutCharactersInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
  }

  export type StandCreateWithoutCharacterInput = {
    id?: string
    name: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    abilities?: StandAbilityCreateNestedManyWithoutStandInput
  }

  export type StandUncheckedCreateWithoutCharacterInput = {
    id?: string
    name: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    abilities?: StandAbilityUncheckedCreateNestedManyWithoutStandInput
  }

  export type StandCreateOrConnectWithoutCharacterInput = {
    where: StandWhereUniqueInput
    create: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
  }

  export type RollCreateWithoutCharacterInput = {
    id?: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutRollsInput
  }

  export type RollUncheckedCreateWithoutCharacterInput = {
    id?: string
    campaignId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type RollCreateOrConnectWithoutCharacterInput = {
    where: RollWhereUniqueInput
    create: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput>
  }

  export type RollCreateManyCharacterInputEnvelope = {
    data: RollCreateManyCharacterInput | RollCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCharactersInput = {
    update: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
    create: XOR<UserCreateWithoutCharactersInput, UserUncheckedCreateWithoutCharactersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCharactersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCharactersInput, UserUncheckedUpdateWithoutCharactersInput>
  }

  export type UserUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaigns?: CampaignUpdateManyWithoutPlayersNestedInput
    dmCampaigns?: CampaignUpdateManyWithoutDmNestedInput
  }

  export type UserUncheckedUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaigns?: CampaignUncheckedUpdateManyWithoutPlayersNestedInput
    dmCampaigns?: CampaignUncheckedUpdateManyWithoutDmNestedInput
  }

  export type CampaignUpsertWithoutCharactersInput = {
    update: XOR<CampaignUpdateWithoutCharactersInput, CampaignUncheckedUpdateWithoutCharactersInput>
    create: XOR<CampaignCreateWithoutCharactersInput, CampaignUncheckedCreateWithoutCharactersInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutCharactersInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutCharactersInput, CampaignUncheckedUpdateWithoutCharactersInput>
  }

  export type CampaignUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dm?: UserUpdateOneRequiredWithoutDmCampaignsNestedInput
    players?: UserUpdateManyWithoutCampaignsNestedInput
    clocks?: ClockUpdateManyWithoutCampaignNestedInput
    rolls?: RollUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    clocks?: ClockUncheckedUpdateManyWithoutCampaignNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type StandUpsertWithoutCharacterInput = {
    update: XOR<StandUpdateWithoutCharacterInput, StandUncheckedUpdateWithoutCharacterInput>
    create: XOR<StandCreateWithoutCharacterInput, StandUncheckedCreateWithoutCharacterInput>
    where?: StandWhereInput
  }

  export type StandUpdateToOneWithWhereWithoutCharacterInput = {
    where?: StandWhereInput
    data: XOR<StandUpdateWithoutCharacterInput, StandUncheckedUpdateWithoutCharacterInput>
  }

  export type StandUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    abilities?: StandAbilityUpdateManyWithoutStandNestedInput
  }

  export type StandUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    abilities?: StandAbilityUncheckedUpdateManyWithoutStandNestedInput
  }

  export type RollUpsertWithWhereUniqueWithoutCharacterInput = {
    where: RollWhereUniqueInput
    update: XOR<RollUpdateWithoutCharacterInput, RollUncheckedUpdateWithoutCharacterInput>
    create: XOR<RollCreateWithoutCharacterInput, RollUncheckedCreateWithoutCharacterInput>
  }

  export type RollUpdateWithWhereUniqueWithoutCharacterInput = {
    where: RollWhereUniqueInput
    data: XOR<RollUpdateWithoutCharacterInput, RollUncheckedUpdateWithoutCharacterInput>
  }

  export type RollUpdateManyWithWhereWithoutCharacterInput = {
    where: RollScalarWhereInput
    data: XOR<RollUpdateManyMutationInput, RollUncheckedUpdateManyWithoutCharacterInput>
  }

  export type RollScalarWhereInput = {
    AND?: RollScalarWhereInput | RollScalarWhereInput[]
    OR?: RollScalarWhereInput[]
    NOT?: RollScalarWhereInput | RollScalarWhereInput[]
    id?: StringFilter<"Roll"> | string
    characterId?: StringFilter<"Roll"> | string
    campaignId?: StringFilter<"Roll"> | string
    rollType?: StringFilter<"Roll"> | string
    actionType?: StringNullableFilter<"Roll"> | string | null
    position?: StringFilter<"Roll"> | string
    effect?: StringFilter<"Roll"> | string
    dice?: IntFilter<"Roll"> | number
    results?: IntNullableListFilter<"Roll">
    outcome?: StringFilter<"Roll"> | string
    createdAt?: DateTimeFilter<"Roll"> | Date | string
  }

  export type CharacterCreateWithoutStandInput = {
    id?: string
    name: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign?: CampaignCreateNestedOneWithoutCharactersInput
    rolls?: RollCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutStandInput = {
    id?: string
    name: string
    userId: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rolls?: RollUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutStandInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutStandInput, CharacterUncheckedCreateWithoutStandInput>
  }

  export type StandAbilityCreateWithoutStandInput = {
    id?: string
    name: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandAbilityUncheckedCreateWithoutStandInput = {
    id?: string
    name: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandAbilityCreateOrConnectWithoutStandInput = {
    where: StandAbilityWhereUniqueInput
    create: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput>
  }

  export type StandAbilityCreateManyStandInputEnvelope = {
    data: StandAbilityCreateManyStandInput | StandAbilityCreateManyStandInput[]
    skipDuplicates?: boolean
  }

  export type CharacterUpsertWithoutStandInput = {
    update: XOR<CharacterUpdateWithoutStandInput, CharacterUncheckedUpdateWithoutStandInput>
    create: XOR<CharacterCreateWithoutStandInput, CharacterUncheckedCreateWithoutStandInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutStandInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutStandInput, CharacterUncheckedUpdateWithoutStandInput>
  }

  export type CharacterUpdateWithoutStandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneWithoutCharactersNestedInput
    rolls?: RollUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutStandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolls?: RollUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type StandAbilityUpsertWithWhereUniqueWithoutStandInput = {
    where: StandAbilityWhereUniqueInput
    update: XOR<StandAbilityUpdateWithoutStandInput, StandAbilityUncheckedUpdateWithoutStandInput>
    create: XOR<StandAbilityCreateWithoutStandInput, StandAbilityUncheckedCreateWithoutStandInput>
  }

  export type StandAbilityUpdateWithWhereUniqueWithoutStandInput = {
    where: StandAbilityWhereUniqueInput
    data: XOR<StandAbilityUpdateWithoutStandInput, StandAbilityUncheckedUpdateWithoutStandInput>
  }

  export type StandAbilityUpdateManyWithWhereWithoutStandInput = {
    where: StandAbilityScalarWhereInput
    data: XOR<StandAbilityUpdateManyMutationInput, StandAbilityUncheckedUpdateManyWithoutStandInput>
  }

  export type StandAbilityScalarWhereInput = {
    AND?: StandAbilityScalarWhereInput | StandAbilityScalarWhereInput[]
    OR?: StandAbilityScalarWhereInput[]
    NOT?: StandAbilityScalarWhereInput | StandAbilityScalarWhereInput[]
    id?: StringFilter<"StandAbility"> | string
    name?: StringFilter<"StandAbility"> | string
    standId?: StringFilter<"StandAbility"> | string
    isUnique?: BoolFilter<"StandAbility"> | boolean
    offenseUse?: StringNullableFilter<"StandAbility"> | string | null
    defenseUse?: StringNullableFilter<"StandAbility"> | string | null
    utilityUse?: StringNullableFilter<"StandAbility"> | string | null
    description?: StringNullableFilter<"StandAbility"> | string | null
    createdAt?: DateTimeFilter<"StandAbility"> | Date | string
    updatedAt?: DateTimeFilter<"StandAbility"> | Date | string
  }

  export type StandCreateWithoutAbilitiesInput = {
    id?: string
    name: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    character: CharacterCreateNestedOneWithoutStandInput
  }

  export type StandUncheckedCreateWithoutAbilitiesInput = {
    id?: string
    name: string
    characterId: string
    type: string
    form: string
    consciousness: string
    power: string
    speed: string
    range: string
    durability: string
    precision: string
    potential: string
    appearance: string
    manifestation?: string | null
    specialTraits?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandCreateOrConnectWithoutAbilitiesInput = {
    where: StandWhereUniqueInput
    create: XOR<StandCreateWithoutAbilitiesInput, StandUncheckedCreateWithoutAbilitiesInput>
  }

  export type StandUpsertWithoutAbilitiesInput = {
    update: XOR<StandUpdateWithoutAbilitiesInput, StandUncheckedUpdateWithoutAbilitiesInput>
    create: XOR<StandCreateWithoutAbilitiesInput, StandUncheckedCreateWithoutAbilitiesInput>
    where?: StandWhereInput
  }

  export type StandUpdateToOneWithWhereWithoutAbilitiesInput = {
    where?: StandWhereInput
    data: XOR<StandUpdateWithoutAbilitiesInput, StandUncheckedUpdateWithoutAbilitiesInput>
  }

  export type StandUpdateWithoutAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutStandNestedInput
  }

  export type StandUncheckedUpdateWithoutAbilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    form?: StringFieldUpdateOperationsInput | string
    consciousness?: StringFieldUpdateOperationsInput | string
    power?: StringFieldUpdateOperationsInput | string
    speed?: StringFieldUpdateOperationsInput | string
    range?: StringFieldUpdateOperationsInput | string
    durability?: StringFieldUpdateOperationsInput | string
    precision?: StringFieldUpdateOperationsInput | string
    potential?: StringFieldUpdateOperationsInput | string
    appearance?: StringFieldUpdateOperationsInput | string
    manifestation?: NullableStringFieldUpdateOperationsInput | string | null
    specialTraits?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutDmCampaignsInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutUserInput
    campaigns?: CampaignCreateNestedManyWithoutPlayersInput
  }

  export type UserUncheckedCreateWithoutDmCampaignsInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutUserInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutPlayersInput
  }

  export type UserCreateOrConnectWithoutDmCampaignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDmCampaignsInput, UserUncheckedCreateWithoutDmCampaignsInput>
  }

  export type UserCreateWithoutCampaignsInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterCreateNestedManyWithoutUserInput
    dmCampaigns?: CampaignCreateNestedManyWithoutDmInput
  }

  export type UserUncheckedCreateWithoutCampaignsInput = {
    id?: string
    email: string
    username?: string | null
    passwordHash?: string | null
    googleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    characters?: CharacterUncheckedCreateNestedManyWithoutUserInput
    dmCampaigns?: CampaignUncheckedCreateNestedManyWithoutDmInput
  }

  export type UserCreateOrConnectWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput>
  }

  export type CharacterCreateWithoutCampaignInput = {
    id?: string
    name: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    stand?: StandCreateNestedOneWithoutCharacterInput
    rolls?: RollCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutCampaignInput = {
    id?: string
    name: string
    userId: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    stand?: StandUncheckedCreateNestedOneWithoutCharacterInput
    rolls?: RollUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput>
  }

  export type CharacterCreateManyCampaignInputEnvelope = {
    data: CharacterCreateManyCampaignInput | CharacterCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type ClockCreateWithoutCampaignInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClockUncheckedCreateWithoutCampaignInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClockCreateOrConnectWithoutCampaignInput = {
    where: ClockWhereUniqueInput
    create: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput>
  }

  export type ClockCreateManyCampaignInputEnvelope = {
    data: ClockCreateManyCampaignInput | ClockCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type RollCreateWithoutCampaignInput = {
    id?: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
    character: CharacterCreateNestedOneWithoutRollsInput
  }

  export type RollUncheckedCreateWithoutCampaignInput = {
    id?: string
    characterId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type RollCreateOrConnectWithoutCampaignInput = {
    where: RollWhereUniqueInput
    create: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput>
  }

  export type RollCreateManyCampaignInputEnvelope = {
    data: RollCreateManyCampaignInput | RollCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDmCampaignsInput = {
    update: XOR<UserUpdateWithoutDmCampaignsInput, UserUncheckedUpdateWithoutDmCampaignsInput>
    create: XOR<UserCreateWithoutDmCampaignsInput, UserUncheckedCreateWithoutDmCampaignsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDmCampaignsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDmCampaignsInput, UserUncheckedUpdateWithoutDmCampaignsInput>
  }

  export type UserUpdateWithoutDmCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUpdateManyWithoutPlayersNestedInput
  }

  export type UserUncheckedUpdateWithoutDmCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutUserNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutPlayersNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCampaignsInput, UserUncheckedUpdateWithoutCampaignsInput>
    create: XOR<UserCreateWithoutCampaignsInput, UserUncheckedCreateWithoutCampaignsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCampaignsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCampaignsInput, UserUncheckedUpdateWithoutCampaignsInput>
  }

  export type UserUpdateManyWithWhereWithoutCampaignsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCampaignsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type CharacterUpsertWithWhereUniqueWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutCampaignInput, CharacterUncheckedUpdateWithoutCampaignInput>
    create: XOR<CharacterCreateWithoutCampaignInput, CharacterUncheckedCreateWithoutCampaignInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutCampaignInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutCampaignInput, CharacterUncheckedUpdateWithoutCampaignInput>
  }

  export type CharacterUpdateManyWithWhereWithoutCampaignInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutCampaignInput>
  }

  export type ClockUpsertWithWhereUniqueWithoutCampaignInput = {
    where: ClockWhereUniqueInput
    update: XOR<ClockUpdateWithoutCampaignInput, ClockUncheckedUpdateWithoutCampaignInput>
    create: XOR<ClockCreateWithoutCampaignInput, ClockUncheckedCreateWithoutCampaignInput>
  }

  export type ClockUpdateWithWhereUniqueWithoutCampaignInput = {
    where: ClockWhereUniqueInput
    data: XOR<ClockUpdateWithoutCampaignInput, ClockUncheckedUpdateWithoutCampaignInput>
  }

  export type ClockUpdateManyWithWhereWithoutCampaignInput = {
    where: ClockScalarWhereInput
    data: XOR<ClockUpdateManyMutationInput, ClockUncheckedUpdateManyWithoutCampaignInput>
  }

  export type ClockScalarWhereInput = {
    AND?: ClockScalarWhereInput | ClockScalarWhereInput[]
    OR?: ClockScalarWhereInput[]
    NOT?: ClockScalarWhereInput | ClockScalarWhereInput[]
    id?: StringFilter<"Clock"> | string
    name?: StringFilter<"Clock"> | string
    segments?: IntFilter<"Clock"> | number
    filled?: IntFilter<"Clock"> | number
    campaignId?: StringFilter<"Clock"> | string
    type?: StringFilter<"Clock"> | string
    createdAt?: DateTimeFilter<"Clock"> | Date | string
    updatedAt?: DateTimeFilter<"Clock"> | Date | string
  }

  export type RollUpsertWithWhereUniqueWithoutCampaignInput = {
    where: RollWhereUniqueInput
    update: XOR<RollUpdateWithoutCampaignInput, RollUncheckedUpdateWithoutCampaignInput>
    create: XOR<RollCreateWithoutCampaignInput, RollUncheckedCreateWithoutCampaignInput>
  }

  export type RollUpdateWithWhereUniqueWithoutCampaignInput = {
    where: RollWhereUniqueInput
    data: XOR<RollUpdateWithoutCampaignInput, RollUncheckedUpdateWithoutCampaignInput>
  }

  export type RollUpdateManyWithWhereWithoutCampaignInput = {
    where: RollScalarWhereInput
    data: XOR<RollUpdateManyMutationInput, RollUncheckedUpdateManyWithoutCampaignInput>
  }

  export type CampaignCreateWithoutClocksInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dm: UserCreateNestedOneWithoutDmCampaignsInput
    players?: UserCreateNestedManyWithoutCampaignsInput
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    rolls?: RollCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutClocksInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    rolls?: RollUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutClocksInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutClocksInput, CampaignUncheckedCreateWithoutClocksInput>
  }

  export type CampaignUpsertWithoutClocksInput = {
    update: XOR<CampaignUpdateWithoutClocksInput, CampaignUncheckedUpdateWithoutClocksInput>
    create: XOR<CampaignCreateWithoutClocksInput, CampaignUncheckedCreateWithoutClocksInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutClocksInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutClocksInput, CampaignUncheckedUpdateWithoutClocksInput>
  }

  export type CampaignUpdateWithoutClocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dm?: UserUpdateOneRequiredWithoutDmCampaignsNestedInput
    players?: UserUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    rolls?: RollUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutClocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CharacterCreateWithoutRollsInput = {
    id?: string
    name: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCharactersInput
    campaign?: CampaignCreateNestedOneWithoutCharactersInput
    stand?: StandCreateNestedOneWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutRollsInput = {
    id?: string
    name: string
    userId: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    stand?: StandUncheckedCreateNestedOneWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutRollsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutRollsInput, CharacterUncheckedCreateWithoutRollsInput>
  }

  export type CampaignCreateWithoutRollsInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dm: UserCreateNestedOneWithoutDmCampaignsInput
    players?: UserCreateNestedManyWithoutCampaignsInput
    characters?: CharacterCreateNestedManyWithoutCampaignInput
    clocks?: ClockCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutRollsInput = {
    id?: string
    name: string
    description?: string | null
    dmId: string
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: UserUncheckedCreateNestedManyWithoutCampaignsInput
    characters?: CharacterUncheckedCreateNestedManyWithoutCampaignInput
    clocks?: ClockUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutRollsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutRollsInput, CampaignUncheckedCreateWithoutRollsInput>
  }

  export type CharacterUpsertWithoutRollsInput = {
    update: XOR<CharacterUpdateWithoutRollsInput, CharacterUncheckedUpdateWithoutRollsInput>
    create: XOR<CharacterCreateWithoutRollsInput, CharacterUncheckedCreateWithoutRollsInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutRollsInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutRollsInput, CharacterUncheckedUpdateWithoutRollsInput>
  }

  export type CharacterUpdateWithoutRollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    campaign?: CampaignUpdateOneWithoutCharactersNestedInput
    stand?: StandUpdateOneWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutRollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stand?: StandUncheckedUpdateOneWithoutCharacterNestedInput
  }

  export type CampaignUpsertWithoutRollsInput = {
    update: XOR<CampaignUpdateWithoutRollsInput, CampaignUncheckedUpdateWithoutRollsInput>
    create: XOR<CampaignCreateWithoutRollsInput, CampaignUncheckedCreateWithoutRollsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutRollsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutRollsInput, CampaignUncheckedUpdateWithoutRollsInput>
  }

  export type CampaignUpdateWithoutRollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dm?: UserUpdateOneRequiredWithoutDmCampaignsNestedInput
    players?: UserUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutRollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CharacterCreateManyUserInput = {
    id?: string
    name: string
    campaignId?: string | null
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignCreateManyDmInput = {
    id?: string
    name: string
    description?: string | null
    tier?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneWithoutCharactersNestedInput
    stand?: StandUpdateOneWithoutCharacterNestedInput
    rolls?: RollUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stand?: StandUncheckedUpdateOneWithoutCharacterNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dm?: UserUpdateOneRequiredWithoutDmCampaignsNestedInput
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUpdateManyWithoutCampaignNestedInput
    rolls?: RollUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUncheckedUpdateManyWithoutCampaignNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dmId?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUpdateWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUpdateManyWithoutCampaignNestedInput
    rolls?: RollUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: UserUncheckedUpdateManyWithoutCampaignsNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutCampaignNestedInput
    clocks?: ClockUncheckedUpdateManyWithoutCampaignNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutDmInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCreateManyCharacterInput = {
    id?: string
    campaignId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type RollUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutRollsNestedInput
  }

  export type RollUncheckedUpdateWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollUncheckedUpdateManyWithoutCharacterInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityCreateManyStandInput = {
    id?: string
    name: string
    isUnique?: boolean
    offenseUse?: string | null
    defenseUse?: string | null
    utilityUse?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StandAbilityUpdateWithoutStandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityUncheckedUpdateWithoutStandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StandAbilityUncheckedUpdateManyWithoutStandInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isUnique?: BoolFieldUpdateOperationsInput | boolean
    offenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    defenseUse?: NullableStringFieldUpdateOperationsInput | string | null
    utilityUse?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateManyCampaignInput = {
    id?: string
    name: string
    userId: string
    origin: string
    tier?: number
    hunt?: number
    study?: number
    survey?: number
    tinker?: number
    finesse?: number
    prowl?: number
    skirmish?: number
    wreck?: number
    bizarre?: number
    command?: number
    consort?: number
    sway?: number
    stress?: number
    maxStress?: number
    trauma?: number
    traumaConditions?: CharacterCreatetraumaConditionsInput | string[]
    vice: string
    vicePurveyor: string
    friends?: CharacterCreatefriendsInput | string[]
    rivals?: CharacterCreaterivalsInput | string[]
    insightXp?: number
    prowessXp?: number
    resolveXp?: number
    playbackXp?: number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: number
    items?: CharacterCreateitemsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClockCreateManyCampaignInput = {
    id?: string
    name: string
    segments?: number
    filled?: number
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RollCreateManyCampaignInput = {
    id?: string
    characterId: string
    rollType: string
    actionType?: string | null
    position: string
    effect: string
    dice: number
    results?: RollCreateresultsInput | number[]
    outcome: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUpdateManyWithoutUserNestedInput
    dmCampaigns?: CampaignUpdateManyWithoutDmNestedInput
  }

  export type UserUncheckedUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    characters?: CharacterUncheckedUpdateManyWithoutUserNestedInput
    dmCampaigns?: CampaignUncheckedUpdateManyWithoutDmNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCharactersNestedInput
    stand?: StandUpdateOneWithoutCharacterNestedInput
    rolls?: RollUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stand?: StandUncheckedUpdateOneWithoutCharacterNestedInput
    rolls?: RollUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    tier?: IntFieldUpdateOperationsInput | number
    hunt?: IntFieldUpdateOperationsInput | number
    study?: IntFieldUpdateOperationsInput | number
    survey?: IntFieldUpdateOperationsInput | number
    tinker?: IntFieldUpdateOperationsInput | number
    finesse?: IntFieldUpdateOperationsInput | number
    prowl?: IntFieldUpdateOperationsInput | number
    skirmish?: IntFieldUpdateOperationsInput | number
    wreck?: IntFieldUpdateOperationsInput | number
    bizarre?: IntFieldUpdateOperationsInput | number
    command?: IntFieldUpdateOperationsInput | number
    consort?: IntFieldUpdateOperationsInput | number
    sway?: IntFieldUpdateOperationsInput | number
    stress?: IntFieldUpdateOperationsInput | number
    maxStress?: IntFieldUpdateOperationsInput | number
    trauma?: IntFieldUpdateOperationsInput | number
    traumaConditions?: CharacterUpdatetraumaConditionsInput | string[]
    vice?: StringFieldUpdateOperationsInput | string
    vicePurveyor?: StringFieldUpdateOperationsInput | string
    friends?: CharacterUpdatefriendsInput | string[]
    rivals?: CharacterUpdaterivalsInput | string[]
    insightXp?: IntFieldUpdateOperationsInput | number
    prowessXp?: IntFieldUpdateOperationsInput | number
    resolveXp?: IntFieldUpdateOperationsInput | number
    playbackXp?: IntFieldUpdateOperationsInput | number
    harm?: JsonNullValueInput | InputJsonValue
    specialArmor?: IntFieldUpdateOperationsInput | number
    items?: CharacterUpdateitemsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClockUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    segments?: IntFieldUpdateOperationsInput | number
    filled?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutRollsNestedInput
  }

  export type RollUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    rollType?: StringFieldUpdateOperationsInput | string
    actionType?: NullableStringFieldUpdateOperationsInput | string | null
    position?: StringFieldUpdateOperationsInput | string
    effect?: StringFieldUpdateOperationsInput | string
    dice?: IntFieldUpdateOperationsInput | number
    results?: RollUpdateresultsInput | number[]
    outcome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterCountOutputTypeDefaultArgs instead
     */
    export type CharacterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StandCountOutputTypeDefaultArgs instead
     */
    export type StandCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StandCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignCountOutputTypeDefaultArgs instead
     */
    export type CampaignCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterDefaultArgs instead
     */
    export type CharacterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StandDefaultArgs instead
     */
    export type StandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StandDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StandAbilityDefaultArgs instead
     */
    export type StandAbilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StandAbilityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignDefaultArgs instead
     */
    export type CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClockDefaultArgs instead
     */
    export type ClockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RollDefaultArgs instead
     */
    export type RollArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RollDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}